// We treat science labs somewhat specially compared to other converters.
//
// Converting science to data follows an exponential decay model, where
// the rate at which science is produced depends on how much data is left
// in the lab. This is not something that we can directly model as a
// background converter, since those only support linear rates. There are
// two approaches that we could take here:
// 1. Create a custom behaviour that models the exponential decay and
//    updates the rate at which science is produced every day or so.
// 2. Track the amount of time that this lab was active and let KSP catch-up
//    code take care of updating the amount of science and data present in
//    the lab.
//
// If the lab was producing some resource that could be consumed by other
// converters then we'd probably want to use approach 1, even though it
// would be more expensive. However, science and data aren't really KSP
// resources and so we don't have to worry about that. This makes option
// 2 far easier, since we don't have to worry about reimplementing the
// behaviour of the lab either, we just need to update it's lastUpdateTime
// when the vessel is loaded.

RESOURCE_DEFINITION
{
    name = BRPScienceLabTime

    displayName = BRP Science Lab Time
    abbreviation = BRP Science Lab Time

    density = 0
    unitCost = 0
    hsp = 1
    flowMode = NO_FLOW
    transfer = NONE
    isTweakable = False
    isVisible = False 
    volume = 1
}

@PART[*]:HAS[@MODULE[ModuleScienceConverter]]:FOR[BackgroundResourceProcessing]
{
    %RESOURCE[BRPScienceLabTime]
    {
        &ResourceName = BRPScienceLabTime
        &amount = 0
        // A lab can technically run forever but we only add capacity for 
        // 10k days, which should be enough for just about anybody.
        //
        // This gets shared between all the labs on the part, but parts
        // will generally not have more than 1 science labe module at a time
        // so it should be fine.
        &maxAmount = 216000000
        &flowMode = NO_FLOW
    }

    +MODULE[ModuleScienceConverter],*
    {
        %ConverterModule = #$name$
        @name = ModuleBackgroundScienceLab
        %TimePassedResourceName = BRPScienceLabTime

        &powerRequirement = 0
        %brpModuleScienceLabMarker = true

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = #$../powerRequirement$
        }

        OUTPUT_RESOURCE
        {
            ResourceName = BRPScienceLabTime
            Ratio = 1
        }
    }

    @MODULE[ModuleBackgroundScienceLab]:HAS[#brpModuleScienceLabMarker[true]]
    {
        !brpModuleScienceLabMarker = delete

        // BaseConverter
        !FillAmount = delete
        !TakeAmount = delete
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        // ModuleScienceConverter
        !sciString = delete
        !datString = delete
        !rateString = delete
        !scientistBonus = delete
        !researchTime = delete
        !dataProcessingMultiplier = delete
        !scienceMultiplier = delete
        !scienceCap = delete
        !powerRequirement = delete
    }
}
