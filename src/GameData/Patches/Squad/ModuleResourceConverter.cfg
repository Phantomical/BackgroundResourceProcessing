// We want to create one ModuleBackgroundResourceConverter for each module
// that derives from BaseConverter.
//
// The way we do this is by creating a copy of the MODULE node and then
// deleting all the fields we don't care about. We do this in two passes
// per module so that the list of deleted fields is only written out in one
// location.
//
// Note that ModuleBackgroundResourceConverter reads the recipe out of the
// BaseConverter instance, so the only fields that are actually used are
// ConverterName and ConvertByMass.

@PART[*]:HAS[@MODULE[ModuleResourceConverter]]:FOR[BackgroundResourceProcessing]
{
    +MODULE[ModuleResourceConverter],*
    {
        %name = ModuleBackgroundResourceConverter
        &ConverterName = <no ConverterName field present>
        %brpModuleBaseConverterMarker = true
    }
}

@PART[*]:HAS[@MODULE[ModuleAsteroidDrill]]:FOR[BackgroundResourceProcessing]
{
    +MODULE[ModuleAsteroidDrill],*
    {
        %name = ModuleBackgroundResourceConverter
        &ConverterName = <no ConverterName field present>
        %brpModuleBaseConverterMarker = true
    }
}

@PART[*]:HAS[@MODULE[ModuleCometDrill]]:FOR[BackgroundResourceProcessing]
{
    +MODULE[ModuleCometDrill],*
    {
        %name = ModuleBackgroundResourceConverter
        &ConverterName = <no ConverterName field present>
        %brpModuleBaseConverterMarker = true
    }
}

@PART[*]:HAS[@MODULE[ModuleResourceHarvester]]:FOR[BackgroundResourceProcessing]
{
    +MODULE[ModuleResourceHarvester],*
    {
        %name = ModuleBackgroundResourceConverter
        &ConverterName = <no ConverterName field present>
        %brpModuleBaseConverterMarker = true
    }
}

@PART[*]:HAS[@MODULE[ModuleBackgroundResourceConverter]:HAS[#brpModuleBaseConverterMarker[true]]]:FOR[BackgroundResourceProcessing]
{
    @MODULE[ModuleBackgroundResourceConverter]:HAS[#brpModuleBaseConverterMarker[true]]
    {
        !brpModuleBaseConverterMarker = delete

        // TODO: It's probably not worth trying to model these since the
        //       solver will deal with partial activation correctly.
        !FillAmount = delete
        !TakeAmount = delete

        // BaseConverter
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        !INPUT_RESOURCE,* {}
        !OUTPUT_RESOURCE,* {}
        !REQUIRED_RESOURCE,* {}

        // ModuleResourceConverter
        // The only field is ConvertByMass and we want to keep that one.

        // BaseDrill
        !ImpactRange = delete
        !ImpactTransform = delete
        !Efficiency = delete

        // ModuleAsteroidDrill, ModuleCometDrill
        !DirectAttach = delete
        !PowerConsumption = delete
        !RockOnly = delete

        // ModuleResourceHarvester
        !CausesDepletion = delete
        !DepletionRate = delete
        !HarvestThreshold = delete
        !HarvesterType = delete
        !ResourceName = delete
        !airSpeedStatic = delete
        !ResourceStatus = delete
    }
}

