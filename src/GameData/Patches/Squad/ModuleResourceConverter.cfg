// We want to create one ModuleBackgroundResourceConverter for each module
// that derives from BaseConverter.
//
// The way we do this is by creating a copy of the MODULE node and then
// deleting all the fields we don't care about. We do this in two passes
// per module so that the list of deleted fields is only written out in one
// location.
//
// Note that ModuleBackgroundResourceConverter reads the recipe out of the
// BaseConverter instance, so the only fields that are actually used are
// ConverterName and ConvertByMass.

@PART[*]:HAS[@MODULE[ModuleResourceConverter]]:FOR[BackgroundResourceProcessing]
{
    +MODULE[ModuleResourceConverter],*
    {
        %ConverterModule = #$name$
        %name = ModuleBackgroundResourceConverter
        // We keep ConverterName if specified

        // Keep INPUT_RESOURCE, OUTPUT_RESOURCE, REQUIRED_RESOURCE
        // but delete everything else
        
        // BaseConverter
        !FillAmount = delete
        !TakeAmount = delete
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        // ModuleResourceConverter
        // Keep ConvertByMass
    }
}
