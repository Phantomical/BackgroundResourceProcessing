// Asteroid/Comet drills aren't quite the usual resource converters. They
// effectively consume "Asteroid Mass" and turn that into resources. However,
// asteroid isn't actually a real resource (likely because it doesn't follow
// any of the existing flow rules) so it is done behind the scenes using a
// few different modules.
//
// In order to make drills compatible with BRP we need to "realize" asteroid
// mass into a real KSP resource. That resource is BRPSpaceObjectMass, which
// is hidden, massless, and cannot flow to any other part.
//
// We do in two parts:
// - ModuleBackgroundSpaceObjectResourceSynchronizer adjusts the BRPSpaceObjectMass
//   inventory to match the remaining mass available for drilling in the 
//   comet/asteroid whenever the background resource processor goes looking.
// - ModuleBackground(Asteroid|Comet)Drill generates the appropriate behaviour
//   to model the drill in the background and handles details WRT whether the
//   module should be enabled. It also updates the lastUpdateTime of the
//   Module(Asteroid|Comet)Drill on startup.

RESOURCE_DEFINITION
{
    name = BRPSpaceObjectMass

    displayName = BRP Space Object Mass
    abbreviation = BRP Space Object Mass

    density = 0  // make sure density is 0 so that it does not affect asteroid mass
    unitConst = 0
    hsp = 1
    flowMode = NO_FLOW
    transfer = NONE
    isTweakable = False
    isVisible = False
    volume = 1
}

@PART[*]:HAS[@MODULE[ModuleAsteroidInfo]]:FOR[BackgroundResourceProcessing]
{
    %MODULE[ModuleBackgroundSpaceObjectResourceSynchronizer]
    {
        %name = ModuleBackgroundSpaceObjectResourceSynchronizer
        %ResourceName = BRPSpaceObjectMass
    }

    %RESOURCE[BRPSpaceObjectMass]
    {
        %name = BRPSpaceObjectMass
        %amount = 0
        %maxAmount = 0
    }

    +MODULE[ModuleAsteroidDrill],*
    {
        %ConverterModule = #$name$
        %name = ModuleBackgroundAsteroidDrill
        %MassResourceName = BRPSpaceObjectMass
        %brpModuleSpaceObjectDrillMarker = true

        INPUT_RESOURCE
        {
            ResourceName = ElectricChage
            Ratio = #$../PowerConsumption$
        }
    }
}

@PART[*]:HAS[@MODULE[ModuleCometInfo]]:FOR[BackgroundResourceProcessing]
{
    %MODULE[ModuleBackgroundSpaceObjectResourceSynchronizer]
    {
        %name = ModuleBackgroundSpaceObjectResourceSynchronizer
        %ResourceName = BRPSpaceObjectMass
    }

    %RESOURCE[BRPSpaceObjectMass]
    {
        %name = BRPSpaceObjectMass
        %amount = 0
        %maxAmount = 0
    }

    +MODULE[ModuleCometDrill],*
    {
        %ConverterModule = #$name$
        %name = ModuleBackgroundCometDrill
        %MassResourceName = BRPSpaceObjectMass
        %brpModuleSpaceObjectDrillMarker = true

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = #$../PowerConsumption$
        }
    }
}

@PART[*]:HAS[@MODULE[ModuleBackground*Drill]:HAS[#brpModuleSpaceObjectDrillMarker[true]]]:FOR[BackgroundResourceProcessing]
{
    @MODULE[ModuleBackground*Drill]:HAS[#brpModuleSpaceObjectDrillMarker[true]]
    {
        !brpModuleSpaceObjectDrillMarker = delete

        // TODO: It's probably not worth trying to model these since the
        //       solver will deal with partial activation correctly.
        !FillAmount = delete
        !TakeAmount = delete

        // BaseConverter
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        // ModuleResourceConverter
        !ConvertByMass = delete

        // BaseDrill
        !ImpactRange = delete
        !ImpactTransform = delete
        !Efficiency = delete

        // ModuleAsteroidDrill, ModuleCometDrill
        !DirectAttach = delete
        !PowerConsumption = delete
        !RockOnly = delete

        // ModuleResourceHarvester
        !CausesDepletion = delete
        !DepletionRate = delete
        !HarvestThreshold = delete
        !HarvesterType = delete
        !ResourceName = delete
        !airSpeedStatic = delete
        !ResourceStatus = delete
    }
}

