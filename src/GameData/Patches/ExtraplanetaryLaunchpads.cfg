// Background resource processing compatibility for Extraplanetary Launchpads.

RESOURCE_DEFINITION {
    name = BRPELWorkHours

    displayName = BRP EL Work Hours
    abbreviation = BRP EL Work Hours

    density = 0
    unitCost = 0
    hsp = 1
    flowMode = ALL_VESSEL
    transfer = NONE
    isTweakable = False
    isVisible = False
    volume = 1
}

// ELExtractor is basically a stock ModuleResourceHarvester except that it also
// has support for Kethane.
//
// We ignore Kethane support here and transform it into a
// ModuleBackgroundResourceHarvester, which is pretty straightforward.
@PART[*]:HAS[@MODULE[ELExtractor]]:LAST[BackgroundResourceProcessing]:NEEDS[Launchpad]
{
    +MODULE[ELExtractor]:HAS[#ResourceName]
    {
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceHarvester
        &flowMode = ALL_VESSEL
        %FlowMode = #$flowMode$

        // EL uses Rate to determine how quickly resources are mined.
        // This corresponds 1:1
        &Rate = 0
        &Efficiency = 1
        @Efficiency *= #$Rate$

        // All EL drills are planetary extractors. This is the default but
        // making it explicit makes it easier to work with.
        %HarvesterType = 0

        // Now clean up all the remaining possible fields.

        // BaseConverter
        !FillAmount = delete
        !TakeAmount = delete
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        // BaseDrill
        !ImpactRange = delete
        !ImpactTransform = delete
        // !Efficiency = delete

        // ELExtractor
        !ResourceStatus = delete
        !EVARange = delete
        !HeadTransform = delete
        !TailTransform = delete
    }
}

// ELConverter has a somewhat complicated way that it handles recipes.
// Instead of working like the stock recipe it produces a potentially
// different set of outputs at different efficiencies.
//
// It is rather too complicated to generically convert these to
// something that looks more like stock, so instead we just hardcode the
// recipes already present in EL.
//
// EL also has an efficiency curve that is specified by adding multiple
// efficiency keys. The expected steady-state value for the efficiency
// is 1 on everything except the LFOFiredSmelter recipe, so I have chosen
// to bake it into the LFOFiredSmelter recipe and ignore it everywhere else.
@PART[*]:HAS[@MODULE[ELConverter],!MODULE[ModuleBackgroundResourceConverter]]:LAST[BackgroundResourceProcessing]:NEEDS[Launchpad&CommunityResourcePack]
{
    +MODULE[ELConverter]:HAS[#ConverterRecipe[LFOFiredSmelter]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        // The LFOFiredSmelter recipe is somewhat weird in that it never
        // actually reaches full efficiency as far as I can tell. This
        // makes estimating the amount that it produces at full-throttle
        // rather difficult.
        //
        // EL has two different recipes that get blended together depending
        // on the temperature of the smelter. With the way that EL models this
        // recipe the maximum efficiency that can be achieved is 53.9%. The
        // numbers I've chosen here are a blend of the two recipes present
        // in the EL config.

        // We always consume 864.49g/s of LFO mix at a ratio of 9 LF:11 Ox
        INPUT_RESOURCE
        {
            ResourceName = LiquidFuel
            Ratio = 0.32051088
        }

        INPUT_RESOURCE
        {
            ResourceName = Oxidizer
            Ratio = 0.5439796
        }

        INPUT_RESOURCE
        {
            ResourceName = MetalOre
            Ratio = 1.596882
            @Ratio *= 0.539
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Metal
            Ratio = 1.1169
            @Ratio *= 0.539
        }

        OUTPUT_RESOURCE
        {
            ResourceName = CarbonDioxide
            // 1.056228 * 0.539 + 0.176038 * (1 - 0.539)
            Ratio = 0.65046041 
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Water
            // 0.28824448 * 0.539 + 0.14412224 * (1 - 0.539)
            Ratio = 0.22180412736
            DumpExcess = true
        }

        // The rest of these are only present as outputs of the eff0 recipe.
        OUTPUT_RESOURCE
        {
            ResourceName = Carbon
            Ratio = 0.0240214
            @Ratio *= 0.461
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = CarbonMonoxide
            Ratio = 0.4761717
            @Ratio *= 0.461
            DumpExcess = true
        }

        // CRP doesn't have a definition for formaldehyde but I'm leaving it
        // commented out here for completion
        // OUTPUT_RESOURCE
        // {
        //    ResourceName = Formaldehyde
        //    Ratio = 0.03002598
        //    @Ratio *= 0.461
        //    DumpExcess = true
        // }

        OUTPUT_RESOURCE
        {
            ResourceName = Hydrogen
            Ratio = 0.01411116
            @Ratio *= 0.461
            DumpExcess = true
        }
    }

    +MODULE[ELConverter]:HAS[#ConverterRecipe[LFOFiredRemelter]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        !INPUT_RESOURCE,* { }
        !OUTPUT_RESOURCE,* { }

        INPUT_RESOURCE
        {
            ResourceName = LiquidFuel
            Ratio = 0.28665
        }

        INPUT_RESOURCE
        {
            ResourceName = Oxidizer
            Ratio = 0.35035
        }

        INPUT_RESOURCE
        {
            ResourceName = ScrapMetal
            Ratio = 3
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Metal
            Ratio = 3
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Carbon
            Ratio = 0.01770017
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = CarbonDioxide
            Ratio = 0.1297136
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = CarbonMonoxide
            Ratio = 0.3508672
            DumpExcess = true
        }

        // OUTPUT_RESOURCE
        // {
        //     ResourceName = Formaldehyde
        //     Ratio = 0.02212465
        //     DumpExcess = true
        // }

        OUTPUT_RESOURCE
        {
            ResourceName = Hydrogen
            Ratio = 0.01039781
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Water
            Ratio = 0.1061965
            DumpExcess = true
        }
    }

    +MODULE[ELConverter]:HAS[#ConverterRecipe[MetalWorking]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        !INPUT_RESOURCE,* { }
        !OUTPUT_RESOURCE,* { }

        INPUT_RESOURCE
        {
            ResourceName = Metal
            Ratio = 0.0312
        }

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = 4.5
        }

        OUTPUT_RESOURCE
        {
            ResourceName = RocketParts
            Ratio = 0.7
        }

        OUTPUT_RESOURCE
        {
            ResourceName = ScrapMetal
            Ratio = 0.295
            DumpExcess = true
        }
    }

    +MODULE[ELConverter]:HAS[#ConverterRecipe[ScrapSinter]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        INPUT_RESOURCE
        {
            ResourceName = ScrapMetal
            Ratio = 0.01
        }

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = 208.8
        }

        OUTPUT_RESOURCE
        {
            ResourceName = RocketParts
            Ratio = 0.99
        }
    }

    +MODULE[ELConverter]:HAS[#ConverterRecipe[ECHeatedSmelter]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        INPUT_RESOURCE
        {
            ResourceName = MetalOre
            Ratio = 0.005110022
        }

        INPUT_RESOURCE
        {
            ResourceName = LiquidFuel
            Ratio = 0.000480766
        }

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = 5661.3
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Metal
            Ratio = 0.00357408
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Water
            Ratio = 0.000432367
            DumpExcess = true
        }

        OUTPUT_RESOURCE
        {
            ResourceName = CarbonDioxide
            Ratio = 0.001584342
            DumpExcess = true
        }
    }

    +MODULE[ELConverter]:HAS[#ConverterRecipe[ECHeatedRemelter]]
    {
        %brpModuleELConverterMarker = true
        %ConverterModule = #$name$
        @name = ModuleBackgroundResourceConverter

        %ConvertByMass = true

        &Rate = 1
        %EfficiencyMultiplier = #$Rate$

        INPUT_RESOURCE
        {
            ResourceName = ScrapMetal
            Ratio = 0.001
        }

        INPUT_RESOURCE
        {
            ResourceName = ElectricCharge
            Ratio = 0.00044
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Metal
            Ratio = 0.001
        }
    }

    // Cleanup: we now delete all the fields that we don't use.
    @MODULE[ModuleBackgroundResourceConverter]:HAS[#brpModuleELConverterMarker[true]]
    {
        !brpModuleELConverterMarker = delete

        // BaseConverter
        !FillAmount = delete
        !TakeAmount = delete
        !GeneratesHeat = delete
        !UseSpecialistBonus = delete
        !UseSpecialistHeatBonus = delete
        !SpecialistBonusBase = delete
        !AutoShutdown = delete
        !DirtyFlag = delete
        !EfficiencyBonus = delete
        !IsActivated = delete
        !StartActionName = delete
        !StopActionName = delete
        !ToggleActionName = delete
        !resourceOutputName = delete
        !AlwaysActive = delete
        !SpecialistEfficiencyFactor = delete
        !SpecialistHeatFactor = delete
        !DefaultShutoffTemp = delete
        !ExperienceEffect = delete
        !status = delete

        !TemperatureModifier,* {}
        !ThermalEfficiency,* {}

        // ModuleResourceConverter
        // Keep ConvertByMass

        // ELConverter
        !EVARange = delete
        !ConverterRecipe = delete
        !Rate = delete
        !efficency = delete
    }
}

// We treat ELWorkshops as (slightly) modified constant producers of WorkHours.
// The work hours are then consumed by launchpads to actually build the vessels.
@PART[*]:HAS[@MODULE[ELWorkshop],!MODULE[ModuleBackgroundELWorkshop]]:LAST[BackgroundResourceProcessing]:NEEDS[Launchpad]
{
    // We add a size-0 resource inventory here so that KSP's resource flow
    // system takes care of linking the workshops to the launchpads.
    %RESOURCE[BRPELWorkHours]
    {
        %name = BRPELWorkHours
        %amount = 0
        %maxAmount = 0
    }

    // This module will inspect the attached ELWorkshop module and use its
    // productivity to adjust the amount of work hours produced.
    %MODULE[ModuleBackgroundELWorkshop]
    {
        %name = ModuleBackgroundELWorkshop

        OUTPUT_RESOURCE
        {
            ResourceName = BRPELWorkHours
            Ratio = 0.00027777777 // 1 / 3600
        }
    }
}

@PART[*]:HAS[@MODULE[ELLaunchpad],!MODULE[ModuleBackgroundELLaunchpad]]:LAST[BackgroundResourceProcessing]:NEEDS[Launchpad]
{
    %MODULE[ModuleBackgroundELLaunchpad]
    {
        %name = ModuleBackgroundELLaunchpad
        %WorkHoursResource = BRPELWorkHours
    }
}
