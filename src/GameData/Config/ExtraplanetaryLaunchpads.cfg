// Support for Extraplanetary Launchpads.
//
// EL already has a basic background resource processing system, but it suffers
// from the same problems as stock converters. Namely, that it tries to do one
// giant chunk of work when the ship is loaded again.
//
// There's two bits we need to replace for EL
// - The worknet. This is fully custom, since none of the work hours on the ship
//   are represented as actual resources.
// - The converters. For this we can reuse existing generic modules.


// We need a resource to represent the amount of work being done.
RESOURCE_DEFINITION:NEEDS[Launchpad]
{
    name = BRPELWorkHours

    displayName = #LOC_BRP_EL_WorkHours_DisplayName
    abbreviation = #LOC_BRP_EL_WorkHours_Abbreviation

    density = 0
    unitCost = 0
    hsp = 1
    flowMode = ALL_VESSEL
    transfer = NONE
    isTweakable = False
    isVisible = False
    volume = 1
}

BACKGROUND_CONVERTER:NEEDS[Launchpad]
{
    name = ELLaunchpad
    adapter = BackgroundELLaunchpad

    WorkHoursResource = BRPELWorkHours
}

BACKGROUND_INVENTORY:NEEDS[Launchpad]
{
    name = ELLaunchpad
    adapter = BackgroundELLaunchpadInventory

    WorkHoursResource = BRPELWorkHours
}

BACKGROUND_CONVERTER:NEEDS[Launchpad]
{
    name = ELWorkshop
    adapter = BackgroundConstantConverter

    ActiveCondition = %isActive
    PushToLocalBackgroundInventory = true

    MULTIPLIER
    {
        Field = Productivity
    }

    OUTPUT_RESOURCE
    {
        ResourceName = BRPELWorkHours
        Ratio = 0.00027777777 // 1 / 3600
    }
}

BACKGROUND_INVENTORY:NEEDS[Launchpad]
{
    name = ELWorkshop
    adapter = BackgroundEmptyInventory

    ResourceName = BRPELWorkHours
}

// The other existing EL modules are basically just stock converters that use
// a custom recipe framework.

// ELExtractor is a somewhat custom resource harvester. However, we can pretty
// much just use the recipe it tells us about and we'll be good to go.
BACKGROUND_CONVERTER:NEEDS[Launchpad]
{
    name = ELExtractor
    adapter = BackgroundResourceHarvester

    // EL has its own custom recipe framework and does not use the input or
    // output fields of the stock converter.
    //
    // The easiest way to get everything to work here is to just use the
    // recipe returned by the converter.
    UsePreparedRecipe = true
}

BACKGROUND_CONVERTER:NEEDS[Launchpad]
{
    name = ELConverter
    adapter = BackgroundMultiConverter

    // We treat the LFOFiredSmelter recipe specially here since it takes so
    // long to actually warm up.
    //
    // SCON mucks around with the EL resource set so we don't include this
    // in that case.
    BACKGROUND_CONVERTER:NEEDS[!SimpleConstruction]
    {
        LFOFiredSmelter = LFOFiredSmelter

        filter = %ConverterRecipe == @LFOFiredSmelter
        adapter = BackgroundConstantConverter

        ConvertByMass = true

        MULTIPLIER
        {
            Field = Rate
        }

        // The LFOFiredSmelter recipe is somewhat weird in that it never
        // actually reaches full efficiency as far as I can tell. This
        // makes estimating the amount that it produces at full-throttle
        // rather difficult.
        //
        // EL has two different recipes that get blended together depending
        // on the temperature of the smelter. With the way that EL models this
        // recipe the maximum efficiency that can be achieved is 53.9%. The
        // numbers I've chosen here are a blend of the two recipes present
        // in the EL config.

        // We always consume 864.49g/s of LFO mix at a ratio of 9 LF:11 Ox
        INPUT_RESOURCE
        {
            ResourceName = LiquidFuel
            Ratio = 0.32051088
        }

        INPUT_RESOURCE
        {
            ResourceName = Oxidizer
            Ratio = 0.5439796
        }

        INPUT_RESOURCE
        {
            ResourceName = MetalOre
            // 1.596882 * 0.539
            Ratio = 0.860719398
        }

        OUTPUT_RESOURCE
        {
            ResourceName = Metal
            // 1.1169 * 0.539
            Ratio = 0.6020091
        }

        OUTPUT_RESOURCE:NEEDS[CommunityResourcePack]
        {
            ResourceName = CarbonDioxide
            // 1.056228 * 0.539 + 0.176038 * (1 - 0.539)
            Ratio = 0.65046041
            DumpExcess = true
        }

        OUTPUT_RESOURCE:NEEDS[CommunityResourcePack]
        {
            ResourceName = Water
            // 0.28824448 * 0.539 + 0.14412224 * (1 - 0.539)
            Ratio = 0.22180412736
            DumpExcess = true
        }

        // The rest of these are only present as outputs of the eff0 recipe.
        OUTPUT_RESOURCE:NEEDS[CommunityResourcePack]
        {
            ResourceName = Carbon
            // 0.0240214 * (1 - 0.539)
            Ratio = 0.0110738654
            DumpExcess = true
        }

        OUTPUT_RESOURCE:NEEDS[CommunityResourcePack]
        {
            ResourceName = CarbonMonoxide
            // 0.4761717 * (1 - 0.539)
            Ratio = 0.2195151537
            DumpExcess = true
        }

        // CRP doesn't have a definition for formaldehyde but I'm leaving it
        // commented out here for completion
        // OUTPUT_RESOURCE
        // {
        //    ResourceName = Formaldehyde
        //    Ratio = 0.03002598
        //    @Ratio *= 0.461
        //    DumpExcess = true
        // }

        OUTPUT_RESOURCE:NEEDS[CommunityResourcePack]
        {
            ResourceName = Hydrogen
            // 0.01411116 * (1 - 0.539)
            Ratio = 0.00650524476 
            DumpExcess = true
        }
    }

    BACKGROUND_CONVERTER
    {
        adapter = BackgroundResourceConverter

        UsePreparedRecipe = true
        UseEfficiencyBonus = true
    }
}
