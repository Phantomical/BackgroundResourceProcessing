using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using BackgroundResourceProcessing.Behaviour;
using BackgroundResourceProcessing.Converter;
using SystemHeat;

namespace BackgroundResourceProcessing.Integration.SystemHeat;

public class BackgroundSystemHeatFissionReactor
    : BackgroundConverter<ModuleSystemHeatFissionReactor>
{
    const BindingFlags Flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;

    static readonly FieldInfo InputsField =
        typeof(ModuleSystemHeatFissionReactor) //
        .GetField("inputs", Flags);
    static readonly FieldInfo OutputsField =
        typeof(ModuleSystemHeatFissionReactor) //
        .GetField("outputs", Flags);

    /// <summary>
    /// The resource that is generated by this generator. Defaults to
    /// <c>ElectricCharge</c>.
    /// </summary>
    ///
    /// <remarks>
    /// By default, SystemHeat fission reactors can only produce EC. This is
    /// included in case there is a derived module that extends that to more
    /// resources.
    /// </remarks>
    [KSPField]
    public string GeneratedResourceName = "ElectricCharge";

    public override ModuleBehaviour GetBehaviour(ModuleSystemHeatFissionReactor module)
    {
        if (!module.Enabled)
            return null;

        float throttle = 1f;
        if (module.ManualControl)
            throttle = module.CurrentThrottle * 0.01f;

        List<ResourceRatio> inputs =
        [
            .. GetInputs(module)
                .Select(input =>
                {
                    input.Ratio *= throttle;
                    return input;
                }),
        ];
        List<ResourceRatio> outputs =
        [
            .. GetOutputs(module)
                .Select(output =>
                {
                    output.Ratio *= throttle;
                    return output;
                }),
        ];

        if (module.GeneratesElectricity)
        {
            outputs.Add(
                new ResourceRatio()
                {
                    ResourceName = GeneratedResourceName,
                    Ratio = module.ElectricalGeneration.Evaluate(throttle * 100f),
                    DumpExcess = false,
                    FlowMode = ResourceFlowMode.NULL,
                }
            );
        }

        return new(new ConstantConverter(inputs, outputs));
    }

    public override void OnRestore(
        ModuleSystemHeatFissionReactor module,
        ResourceConverter converter
    )
    {
        module.LastUpdateTime = Planetarium.GetUniversalTime();
    }

    private List<ResourceRatio> GetInputs(ModuleSystemHeatFissionReactor module)
    {
        return (List<ResourceRatio>)InputsField.GetValue(module);
    }

    private List<ResourceRatio> GetOutputs(ModuleSystemHeatFissionReactor module)
    {
        return (List<ResourceRatio>)OutputsField.GetValue(module);
    }

    private static ResourceRatio MultiplyRatio(ResourceRatio ratio, double mult)
    {
        ratio.Ratio *= mult;
        return ratio;
    }
}
