//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Google.OrTools.LinearSolver {

public partial class Objective : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Objective(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Objective obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Objective obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Objective() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          operations_research_linear_solverPINVOKE.delete_Objective(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void Clear() {
    operations_research_linear_solverPINVOKE.Objective_Clear(swigCPtr);
  }

  public void SetCoefficient(Variable var, double coeff) {
    operations_research_linear_solverPINVOKE.Objective_SetCoefficient(swigCPtr, Variable.getCPtr(var), coeff);
  }

  public double GetCoefficient(Variable var) {
    double ret = operations_research_linear_solverPINVOKE.Objective_GetCoefficient(swigCPtr, Variable.getCPtr(var));
    return ret;
  }

  public void SetOffset(double value) {
    operations_research_linear_solverPINVOKE.Objective_SetOffset(swigCPtr, value);
  }

  public double Offset() {
    double ret = operations_research_linear_solverPINVOKE.Objective_Offset(swigCPtr);
    return ret;
  }

  public void SetOptimizationDirection(bool maximize) {
    operations_research_linear_solverPINVOKE.Objective_SetOptimizationDirection(swigCPtr, maximize);
  }

  public void SetMinimization() {
    operations_research_linear_solverPINVOKE.Objective_SetMinimization(swigCPtr);
  }

  public void SetMaximization() {
    operations_research_linear_solverPINVOKE.Objective_SetMaximization(swigCPtr);
  }

  public bool Maximization() {
    bool ret = operations_research_linear_solverPINVOKE.Objective_Maximization(swigCPtr);
    return ret;
  }

  public bool Minimization() {
    bool ret = operations_research_linear_solverPINVOKE.Objective_Minimization(swigCPtr);
    return ret;
  }

  public double Value() {
    double ret = operations_research_linear_solverPINVOKE.Objective_Value(swigCPtr);
    return ret;
  }

  public double BestBound() {
    double ret = operations_research_linear_solverPINVOKE.Objective_BestBound(swigCPtr);
    return ret;
  }

}

}
