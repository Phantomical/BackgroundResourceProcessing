// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ortools/linear_solver/linear_solver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OperationsResearch {

  /// <summary>Holder for reflection information generated from ortools/linear_solver/linear_solver.proto</summary>
  public static partial class LinearSolverReflection {

    #region Descriptor
    /// <summary>File descriptor for ortools/linear_solver/linear_solver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LinearSolverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilvcnRvb2xzL2xpbmVhcl9zb2x2ZXIvbGluZWFyX3NvbHZlci5wcm90bxIT",
            "b3BlcmF0aW9uc19yZXNlYXJjaBojb3J0b29scy91dGlsL29wdGlvbmFsX2Jv",
            "b2xlYW4ucHJvdG8isgEKD01QVmFyaWFibGVQcm90bxIZCgtsb3dlcl9ib3Vu",
            "ZBgBIAEoAToELWluZhIYCgt1cHBlcl9ib3VuZBgCIAEoAToDaW5mEiAKFW9i",
            "amVjdGl2ZV9jb2VmZmljaWVudBgDIAEoAToBMBIZCgppc19pbnRlZ2VyGAQg",
            "ASgIOgVmYWxzZRIOCgRuYW1lGAUgASgJOgASHQoSYnJhbmNoaW5nX3ByaW9y",
            "aXR5GAYgASgFOgEwIqABChFNUENvbnN0cmFpbnRQcm90bxIVCgl2YXJfaW5k",
            "ZXgYBiADKAVCAhABEhcKC2NvZWZmaWNpZW50GAcgAygBQgIQARIZCgtsb3dl",
            "cl9ib3VuZBgCIAEoAToELWluZhIYCgt1cHBlcl9ib3VuZBgDIAEoAToDaW5m",
            "Eg4KBG5hbWUYBCABKAk6ABIWCgdpc19sYXp5GAUgASgIOgVmYWxzZSL3BAoY",
            "TVBHZW5lcmFsQ29uc3RyYWludFByb3RvEg4KBG5hbWUYASABKAk6ABJKChRp",
            "bmRpY2F0b3JfY29uc3RyYWludBgCIAEoCzIqLm9wZXJhdGlvbnNfcmVzZWFy",
            "Y2guTVBJbmRpY2F0b3JDb25zdHJhaW50SAASPgoOc29zX2NvbnN0cmFpbnQY",
            "AyABKAsyJC5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QU29zQ29uc3RyYWludEgA",
            "EkoKFHF1YWRyYXRpY19jb25zdHJhaW50GAQgASgLMioub3BlcmF0aW9uc19y",
            "ZXNlYXJjaC5NUFF1YWRyYXRpY0NvbnN0cmFpbnRIABI+Cg5hYnNfY29uc3Ry",
            "YWludBgFIAEoCzIkLm9wZXJhdGlvbnNfcmVzZWFyY2guTVBBYnNDb25zdHJh",
            "aW50SAASQAoOYW5kX2NvbnN0cmFpbnQYBiABKAsyJi5vcGVyYXRpb25zX3Jl",
            "c2VhcmNoLk1QQXJyYXlDb25zdHJhaW50SAASPwoNb3JfY29uc3RyYWludBgH",
            "IAEoCzImLm9wZXJhdGlvbnNfcmVzZWFyY2guTVBBcnJheUNvbnN0cmFpbnRI",
            "ABJMCg5taW5fY29uc3RyYWludBgIIAEoCzIyLm9wZXJhdGlvbnNfcmVzZWFy",
            "Y2guTVBBcnJheVdpdGhDb25zdGFudENvbnN0cmFpbnRIABJMCg5tYXhfY29u",
            "c3RyYWludBgJIAEoCzIyLm9wZXJhdGlvbnNfcmVzZWFyY2guTVBBcnJheVdp",
            "dGhDb25zdGFudENvbnN0cmFpbnRIAEIUChJnZW5lcmFsX2NvbnN0cmFpbnQi",
            "eQoVTVBJbmRpY2F0b3JDb25zdHJhaW50EhEKCXZhcl9pbmRleBgBIAEoBRIR",
            "Cgl2YXJfdmFsdWUYAiABKAUSOgoKY29uc3RyYWludBgDIAEoCzImLm9wZXJh",
            "dGlvbnNfcmVzZWFyY2guTVBDb25zdHJhaW50UHJvdG8inwEKD01QU29zQ29u",
            "c3RyYWludBJFCgR0eXBlGAEgASgOMikub3BlcmF0aW9uc19yZXNlYXJjaC5N",
            "UFNvc0NvbnN0cmFpbnQuVHlwZToMU09TMV9ERUZBVUxUEhEKCXZhcl9pbmRl",
            "eBgCIAMoBRIOCgZ3ZWlnaHQYAyADKAEiIgoEVHlwZRIQCgxTT1MxX0RFRkFV",
            "TFQQABIICgRTT1MyEAEitAEKFU1QUXVhZHJhdGljQ29uc3RyYWludBIRCgl2",
            "YXJfaW5kZXgYASADKAUSEwoLY29lZmZpY2llbnQYAiADKAESEwoLcXZhcjFf",
            "aW5kZXgYAyADKAUSEwoLcXZhcjJfaW5kZXgYBCADKAUSFAoMcWNvZWZmaWNp",
            "ZW50GAUgAygBEhkKC2xvd2VyX2JvdW5kGAYgASgBOgQtaW5mEhgKC3VwcGVy",
            "X2JvdW5kGAcgASgBOgNpbmYiQQoPTVBBYnNDb25zdHJhaW50EhEKCXZhcl9p",
            "bmRleBgBIAEoBRIbChNyZXN1bHRhbnRfdmFyX2luZGV4GAIgASgFIkMKEU1Q",
            "QXJyYXlDb25zdHJhaW50EhEKCXZhcl9pbmRleBgBIAMoBRIbChNyZXN1bHRh",
            "bnRfdmFyX2luZGV4GAIgASgFImEKHU1QQXJyYXlXaXRoQ29uc3RhbnRDb25z",
            "dHJhaW50EhEKCXZhcl9pbmRleBgBIAMoBRIQCghjb25zdGFudBgCIAEoARIb",
            "ChNyZXN1bHRhbnRfdmFyX2luZGV4GAMgASgFIlUKFE1QUXVhZHJhdGljT2Jq",
            "ZWN0aXZlEhMKC3F2YXIxX2luZGV4GAEgAygFEhMKC3F2YXIyX2luZGV4GAIg",
            "AygFEhMKC2NvZWZmaWNpZW50GAMgAygBIkkKGVBhcnRpYWxWYXJpYWJsZUFz",
            "c2lnbm1lbnQSFQoJdmFyX2luZGV4GAEgAygFQgIQARIVCgl2YXJfdmFsdWUY",
            "AiADKAFCAhABIuQFCgxNUE1vZGVsUHJvdG8SNgoIdmFyaWFibGUYAyADKAsy",
            "JC5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QVmFyaWFibGVQcm90bxI6Cgpjb25z",
            "dHJhaW50GAQgAygLMiYub3BlcmF0aW9uc19yZXNlYXJjaC5NUENvbnN0cmFp",
            "bnRQcm90bxJJChJnZW5lcmFsX2NvbnN0cmFpbnQYByADKAsyLS5vcGVyYXRp",
            "b25zX3Jlc2VhcmNoLk1QR2VuZXJhbENvbnN0cmFpbnRQcm90bxIXCghtYXhp",
            "bWl6ZRgBIAEoCDoFZmFsc2USGwoQb2JqZWN0aXZlX29mZnNldBgCIAEoAToB",
            "MBJGChNxdWFkcmF0aWNfb2JqZWN0aXZlGAggASgLMikub3BlcmF0aW9uc19y",
            "ZXNlYXJjaC5NUFF1YWRyYXRpY09iamVjdGl2ZRIOCgRuYW1lGAUgASgJOgAS",
            "RQoNc29sdXRpb25faGludBgGIAEoCzIuLm9wZXJhdGlvbnNfcmVzZWFyY2gu",
            "UGFydGlhbFZhcmlhYmxlQXNzaWdubWVudBJACgphbm5vdGF0aW9uGAkgAygL",
            "Miwub3BlcmF0aW9uc19yZXNlYXJjaC5NUE1vZGVsUHJvdG8uQW5ub3RhdGlv",
            "bhr9AQoKQW5ub3RhdGlvbhJMCgt0YXJnZXRfdHlwZRgBIAEoDjI3Lm9wZXJh",
            "dGlvbnNfcmVzZWFyY2guTVBNb2RlbFByb3RvLkFubm90YXRpb24uVGFyZ2V0",
            "VHlwZRIUCgx0YXJnZXRfaW5kZXgYAiABKAUSEwoLdGFyZ2V0X25hbWUYAyAB",
            "KAkSEwoLcGF5bG9hZF9rZXkYBCABKAkSFQoNcGF5bG9hZF92YWx1ZRgFIAEo",
            "CSJKCgpUYXJnZXRUeXBlEhQKEFZBUklBQkxFX0RFRkFVTFQQABIOCgpDT05T",
            "VFJBSU5UEAESFgoSR0VORVJBTF9DT05TVFJBSU5UEAIiHwoOT3B0aW9uYWxE",
            "b3VibGUSDQoFdmFsdWUYASABKAEivQQKGE1QU29sdmVyQ29tbW9uUGFyYW1l",
            "dGVycxI9ChByZWxhdGl2ZV9taXBfZ2FwGAEgASgLMiMub3BlcmF0aW9uc19y",
            "ZXNlYXJjaC5PcHRpb25hbERvdWJsZRI9ChBwcmltYWxfdG9sZXJhbmNlGAIg",
            "ASgLMiMub3BlcmF0aW9uc19yZXNlYXJjaC5PcHRpb25hbERvdWJsZRI7Cg5k",
            "dWFsX3RvbGVyYW5jZRgDIAEoCzIjLm9wZXJhdGlvbnNfcmVzZWFyY2guT3B0",
            "aW9uYWxEb3VibGUSagoMbHBfYWxnb3JpdGhtGAQgASgOMj8ub3BlcmF0aW9u",
            "c19yZXNlYXJjaC5NUFNvbHZlckNvbW1vblBhcmFtZXRlcnMuTFBBbGdvcml0",
            "aG1WYWx1ZXM6E0xQX0FMR09fVU5TUEVDSUZJRUQSSAoIcHJlc29sdmUYBSAB",
            "KA4yJC5vcGVyYXRpb25zX3Jlc2VhcmNoLk9wdGlvbmFsQm9vbGVhbjoQQk9P",
            "TF9VTlNQRUNJRklFRBJHCgdzY2FsaW5nGAcgASgOMiQub3BlcmF0aW9uc19y",
            "ZXNlYXJjaC5PcHRpb25hbEJvb2xlYW46EEJPT0xfVU5TUEVDSUZJRUQiZwoR",
            "TFBBbGdvcml0aG1WYWx1ZXMSFwoTTFBfQUxHT19VTlNQRUNJRklFRBAAEhAK",
            "DExQX0FMR09fRFVBTBABEhIKDkxQX0FMR09fUFJJTUFMEAISEwoPTFBfQUxH",
            "T19CQVJSSUVSEAMiswMKEU1QTW9kZWxEZWx0YVByb3RvEiAKGGJhc2VsaW5l",
            "X21vZGVsX2ZpbGVfcGF0aBgBIAEoCRJZChJ2YXJpYWJsZV9vdmVycmlkZXMY",
            "AiADKAsyPS5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QTW9kZWxEZWx0YVByb3Rv",
            "LlZhcmlhYmxlT3ZlcnJpZGVzRW50cnkSXQoUY29uc3RyYWludF9vdmVycmlk",
            "ZXMYAyADKAsyPy5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QTW9kZWxEZWx0YVBy",
            "b3RvLkNvbnN0cmFpbnRPdmVycmlkZXNFbnRyeRpeChZWYXJpYWJsZU92ZXJy",
            "aWRlc0VudHJ5EgsKA2tleRgBIAEoBRIzCgV2YWx1ZRgCIAEoCzIkLm9wZXJh",
            "dGlvbnNfcmVzZWFyY2guTVBWYXJpYWJsZVByb3RvOgI4ARpiChhDb25zdHJh",
            "aW50T3ZlcnJpZGVzRW50cnkSCwoDa2V5GAEgASgFEjUKBXZhbHVlGAIgASgL",
            "MiYub3BlcmF0aW9uc19yZXNlYXJjaC5NUENvbnN0cmFpbnRQcm90bzoCOAEi",
            "mwgKDk1QTW9kZWxSZXF1ZXN0EjAKBW1vZGVsGAEgASgLMiEub3BlcmF0aW9u",
            "c19yZXNlYXJjaC5NUE1vZGVsUHJvdG8SXAoLc29sdmVyX3R5cGUYAiABKA4y",
            "Li5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QTW9kZWxSZXF1ZXN0LlNvbHZlclR5",
            "cGU6F0dMT1BfTElORUFSX1BST0dSQU1NSU5HEiEKGXNvbHZlcl90aW1lX2xp",
            "bWl0X3NlY29uZHMYAyABKAESLAodZW5hYmxlX2ludGVybmFsX3NvbHZlcl9v",
            "dXRwdXQYBCABKAg6BWZhbHNlEiIKGnNvbHZlcl9zcGVjaWZpY19wYXJhbWV0",
            "ZXJzGAUgASgJEjgKKWlnbm9yZV9zb2x2ZXJfc3BlY2lmaWNfcGFyYW1ldGVy",
            "c19mYWlsdXJlGAkgASgIOgVmYWxzZRI7Cgttb2RlbF9kZWx0YRgIIAEoCzIm",
            "Lm9wZXJhdGlvbnNfcmVzZWFyY2guTVBNb2RlbERlbHRhUHJvdG8SLgojcG9w",
            "dWxhdGVfYWRkaXRpb25hbF9zb2x1dGlvbnNfdXBfdG8YCyABKAU6ATAi3AQK",
            "ClNvbHZlclR5cGUSGgoWQ0xQX0xJTkVBUl9QUk9HUkFNTUlORxAAEhsKF0dM",
            "T1BfTElORUFSX1BST0dSQU1NSU5HEAISGwoXR0xQS19MSU5FQVJfUFJPR1JB",
            "TU1JTkcQARIdChlHVVJPQklfTElORUFSX1BST0dSQU1NSU5HEAYSHQoZWFBS",
            "RVNTX0xJTkVBUl9QUk9HUkFNTUlORxBlEhwKGENQTEVYX0xJTkVBUl9QUk9H",
            "UkFNTUlORxAKEhwKGEhJR0hTX0xJTkVBUl9QUk9HUkFNTUlORxAPEiIKHlND",
            "SVBfTUlYRURfSU5URUdFUl9QUk9HUkFNTUlORxADEiIKHkdMUEtfTUlYRURf",
            "SU5URUdFUl9QUk9HUkFNTUlORxAEEiEKHUNCQ19NSVhFRF9JTlRFR0VSX1BS",
            "T0dSQU1NSU5HEAUSJAogR1VST0JJX01JWEVEX0lOVEVHRVJfUFJPR1JBTU1J",
            "TkcQBxIkCiBYUFJFU1NfTUlYRURfSU5URUdFUl9QUk9HUkFNTUlORxBmEiMK",
            "H0NQTEVYX01JWEVEX0lOVEVHRVJfUFJPR1JBTU1JTkcQCxIjCh9ISUdIU19N",
            "SVhFRF9JTlRFR0VSX1BST0dSQU1NSU5HEBASGwoXQk9QX0lOVEVHRVJfUFJP",
            "R1JBTU1JTkcQDBIbChdTQVRfSU5URUdFUl9QUk9HUkFNTUlORxAOEhsKF1BE",
            "TFBfTElORUFSX1BST0dSQU1NSU5HEAgSJgoiS05BUFNBQ0tfTUlYRURfSU5U",
            "RUdFUl9QUk9HUkFNTUlORxANIkEKCk1QU29sdXRpb24SFwoPb2JqZWN0aXZl",
            "X3ZhbHVlGAEgASgBEhoKDnZhcmlhYmxlX3ZhbHVlGAIgAygBQgIQASJPCgtN",
            "UFNvbHZlSW5mbxIfChdzb2x2ZV93YWxsX3RpbWVfc2Vjb25kcxgBIAEoARIf",
            "Chdzb2x2ZV91c2VyX3RpbWVfc2Vjb25kcxgCIAEoASKWAwoSTVBTb2x1dGlv",
            "blJlc3BvbnNlElQKBnN0YXR1cxgBIAEoDjIrLm9wZXJhdGlvbnNfcmVzZWFy",
            "Y2guTVBTb2x2ZXJSZXNwb25zZVN0YXR1czoXTVBTT0xWRVJfVU5LTk9XTl9T",
            "VEFUVVMSEgoKc3RhdHVzX3N0chgHIAEoCRIXCg9vYmplY3RpdmVfdmFsdWUY",
            "AiABKAESHAoUYmVzdF9vYmplY3RpdmVfYm91bmQYBSABKAESGgoOdmFyaWFi",
            "bGVfdmFsdWUYAyADKAFCAhABEjQKCnNvbHZlX2luZm8YCiABKAsyIC5vcGVy",
            "YXRpb25zX3Jlc2VhcmNoLk1QU29sdmVJbmZvEhwKFHNvbHZlcl9zcGVjaWZp",
            "Y19pbmZvGAsgASgMEhYKCmR1YWxfdmFsdWUYBCADKAFCAhABEhgKDHJlZHVj",
            "ZWRfY29zdBgGIAMoAUICEAESPQoUYWRkaXRpb25hbF9zb2x1dGlvbnMYCCAD",
            "KAsyHy5vcGVyYXRpb25zX3Jlc2VhcmNoLk1QU29sdXRpb24qvQMKFk1QU29s",
            "dmVyUmVzcG9uc2VTdGF0dXMSFAoQTVBTT0xWRVJfT1BUSU1BTBAAEhUKEU1Q",
            "U09MVkVSX0ZFQVNJQkxFEAESFwoTTVBTT0xWRVJfSU5GRUFTSUJMRRACEhYK",
            "Ek1QU09MVkVSX1VOQk9VTkRFRBADEhUKEU1QU09MVkVSX0FCTk9STUFMEAQS",
            "FwoTTVBTT0xWRVJfTk9UX1NPTFZFRBAGEhsKF01QU09MVkVSX01PREVMX0lT",
            "X1ZBTElEEGESHgoaTVBTT0xWRVJfQ0FOQ0VMTEVEX0JZX1VTRVIQYhIbChdN",
            "UFNPTFZFUl9VTktOT1dOX1NUQVRVUxBjEhoKFk1QU09MVkVSX01PREVMX0lO",
            "VkFMSUQQBRIoCiRNUFNPTFZFUl9NT0RFTF9JTlZBTElEX1NPTFVUSU9OX0hJ",
            "TlQQVBIsCihNUFNPTFZFUl9NT0RFTF9JTlZBTElEX1NPTFZFUl9QQVJBTUVU",
            "RVJTEFUSJAogTVBTT0xWRVJfU09MVkVSX1RZUEVfVU5BVkFJTEFCTEUQBxIh",
            "Ch1NUFNPTFZFUl9JTkNPTVBBVElCTEVfT1BUSU9OUxBxQiMKH2NvbS5nb29n",
            "bGUub3J0b29scy5saW5lYXJzb2x2ZXJQAQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.OrTools.Util.OptionalBooleanReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::OperationsResearch.MPSolverResponseStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPVariableProto), global::OperationsResearch.MPVariableProto.Parser, new[]{ "LowerBound", "UpperBound", "ObjectiveCoefficient", "IsInteger", "Name", "BranchingPriority" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPConstraintProto), global::OperationsResearch.MPConstraintProto.Parser, new[]{ "VarIndex", "Coefficient", "LowerBound", "UpperBound", "Name", "IsLazy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPGeneralConstraintProto), global::OperationsResearch.MPGeneralConstraintProto.Parser, new[]{ "Name", "IndicatorConstraint", "SosConstraint", "QuadraticConstraint", "AbsConstraint", "AndConstraint", "OrConstraint", "MinConstraint", "MaxConstraint" }, new[]{ "GeneralConstraint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPIndicatorConstraint), global::OperationsResearch.MPIndicatorConstraint.Parser, new[]{ "VarIndex", "VarValue", "Constraint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPSosConstraint), global::OperationsResearch.MPSosConstraint.Parser, new[]{ "Type", "VarIndex", "Weight" }, null, new[]{ typeof(global::OperationsResearch.MPSosConstraint.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPQuadraticConstraint), global::OperationsResearch.MPQuadraticConstraint.Parser, new[]{ "VarIndex", "Coefficient", "Qvar1Index", "Qvar2Index", "Qcoefficient", "LowerBound", "UpperBound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPAbsConstraint), global::OperationsResearch.MPAbsConstraint.Parser, new[]{ "VarIndex", "ResultantVarIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPArrayConstraint), global::OperationsResearch.MPArrayConstraint.Parser, new[]{ "VarIndex", "ResultantVarIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPArrayWithConstantConstraint), global::OperationsResearch.MPArrayWithConstantConstraint.Parser, new[]{ "VarIndex", "Constant", "ResultantVarIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPQuadraticObjective), global::OperationsResearch.MPQuadraticObjective.Parser, new[]{ "Qvar1Index", "Qvar2Index", "Coefficient" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.PartialVariableAssignment), global::OperationsResearch.PartialVariableAssignment.Parser, new[]{ "VarIndex", "VarValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPModelProto), global::OperationsResearch.MPModelProto.Parser, new[]{ "Variable", "Constraint", "GeneralConstraint", "Maximize", "ObjectiveOffset", "QuadraticObjective", "Name", "SolutionHint", "Annotation" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPModelProto.Types.Annotation), global::OperationsResearch.MPModelProto.Types.Annotation.Parser, new[]{ "TargetType", "TargetIndex", "TargetName", "PayloadKey", "PayloadValue" }, null, new[]{ typeof(global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.OptionalDouble), global::OperationsResearch.OptionalDouble.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPSolverCommonParameters), global::OperationsResearch.MPSolverCommonParameters.Parser, new[]{ "RelativeMipGap", "PrimalTolerance", "DualTolerance", "LpAlgorithm", "Presolve", "Scaling" }, null, new[]{ typeof(global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPModelDeltaProto), global::OperationsResearch.MPModelDeltaProto.Parser, new[]{ "BaselineModelFilePath", "VariableOverrides", "ConstraintOverrides" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPModelRequest), global::OperationsResearch.MPModelRequest.Parser, new[]{ "Model", "SolverType", "SolverTimeLimitSeconds", "EnableInternalSolverOutput", "SolverSpecificParameters", "IgnoreSolverSpecificParametersFailure", "ModelDelta", "PopulateAdditionalSolutionsUpTo" }, null, new[]{ typeof(global::OperationsResearch.MPModelRequest.Types.SolverType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPSolution), global::OperationsResearch.MPSolution.Parser, new[]{ "ObjectiveValue", "VariableValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPSolveInfo), global::OperationsResearch.MPSolveInfo.Parser, new[]{ "SolveWallTimeSeconds", "SolveUserTimeSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OperationsResearch.MPSolutionResponse), global::OperationsResearch.MPSolutionResponse.Parser, new[]{ "Status", "StatusStr", "ObjectiveValue", "BestObjectiveBound", "VariableValue", "SolveInfo", "SolverSpecificInfo", "DualValue", "ReducedCost", "AdditionalSolutions" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Status returned by the solver. They follow a hierarchical nomenclature, to
  /// allow us to add more enum values in the future. Clients should use
  /// InCategory() to match these enums, with the following C++ pseudo-code:
  ///
  /// bool InCategory(MPSolverResponseStatus status, MPSolverResponseStatus cat) {
  ///   if (cat == MPSOLVER_OPTIMAL) return status == MPSOLVER_OPTIMAL;
  ///   while (status > cat) status >>= 4;
  ///   return status == cat;
  /// }
  /// </summary>
  public enum MPSolverResponseStatus {
    /// <summary>
    /// The solver found the proven optimal solution. This is what should be
    /// returned in most cases.
    ///
    /// WARNING: for historical reason, the value is zero, which means that this
    /// value can't have any subcategories.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_OPTIMAL")] MpsolverOptimal = 0,
    /// <summary>
    /// The solver had enough time to find some solution that satisfies all
    /// constraints, but it did not prove optimality (which means it may or may
    /// not have reached the optimal).
    ///
    /// This can happen for large LP models (Linear Programming), and is a frequent
    /// response for time-limited MIPs (Mixed Integer Programming). In the MIP
    /// case, the difference between the solution 'objective_value' and
    /// 'best_objective_bound' fields of the MPSolutionResponse will give an
    /// indication of how far this solution is from the optimal one.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_FEASIBLE")] MpsolverFeasible = 1,
    /// <summary>
    /// The model does not have any solution, according to the solver (which
    /// "proved" it, with the caveat that numerical proofs aren't actual proofs),
    /// or based on trivial considerations (eg. a variable whose lower bound is
    /// strictly greater than its upper bound).
    /// </summary>
    [pbr::OriginalName("MPSOLVER_INFEASIBLE")] MpsolverInfeasible = 2,
    /// <summary>
    /// There exist solutions that make the magnitude of the objective value
    /// as large as wanted (i.e. -infinity (resp. +infinity) for a minimization
    /// (resp. maximization) problem.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_UNBOUNDED")] MpsolverUnbounded = 3,
    /// <summary>
    /// An error (most probably numerical) occurred.
    /// One likely cause for such errors is a large numerical range among variable
    /// coefficients (eg. 1e-16, 1e20), in which case one should try to shrink it.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_ABNORMAL")] MpsolverAbnormal = 4,
    /// <summary>
    /// The solver did not have a chance to diagnose the model in one of the
    /// categories above.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_NOT_SOLVED")] MpsolverNotSolved = 6,
    /// <summary>
    /// Like "NOT_SOLVED", but typically used by model validation functions
    /// returning a "model status", to enhance readability of the client code.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_MODEL_IS_VALID")] MpsolverModelIsValid = 97,
    /// <summary>
    /// The solve was interrupted by the user, and the solver didn't have time to
    /// return a proper status.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_CANCELLED_BY_USER")] MpsolverCancelledByUser = 98,
    /// <summary>
    /// Special value: the solver status could not be properly translated and is
    /// unknown.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_UNKNOWN_STATUS")] MpsolverUnknownStatus = 99,
    /// <summary>
    /// Model errors. These are always deterministic and repeatable.
    /// They should be accompanied with a string description of the error.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_MODEL_INVALID")] MpsolverModelInvalid = 5,
    /// <summary>
    /// Something is wrong with the fields "solution_hint_var_index" and/or
    /// "solution_hint_var_value".
    /// </summary>
    [pbr::OriginalName("MPSOLVER_MODEL_INVALID_SOLUTION_HINT")] MpsolverModelInvalidSolutionHint = 84,
    /// <summary>
    /// Something is wrong with the solver_specific_parameters request field.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_MODEL_INVALID_SOLVER_PARAMETERS")] MpsolverModelInvalidSolverParameters = 85,
    /// <summary>
    /// Implementation error: the requested solver implementation is not
    /// available (see MPModelRequest.solver_type).
    /// The linear solver binary was probably not linked with the required library,
    /// eg //ortools/linear_solver:linear_solver_scip for SCIP.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_SOLVER_TYPE_UNAVAILABLE")] MpsolverSolverTypeUnavailable = 7,
    /// <summary>
    /// Some of the selected options were incompatible, e.g. a cancellable solve
    /// was requested via SolverClient::SolveMipRemotely() with an underlying
    /// solver that doesn't support cancellation. status_str should contain a
    /// description of the issue.
    /// </summary>
    [pbr::OriginalName("MPSOLVER_INCOMPATIBLE_OPTIONS")] MpsolverIncompatibleOptions = 113,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A variable is always constrained in the form:
  ///    lower_bound &lt;= x &lt;= upper_bound
  /// where lower_bound and upper_bound:
  /// - Can form a singleton: x = constant = lower_bound = upper_bound.
  /// - Can form a finite interval: lower_bound &lt;= x &lt;= upper_bound. (x is boxed.)
  /// - Can form a semi-infinite interval.
  ///     - lower_bound = -infinity: x &lt;= upper_bound.
  ///     - upper_bound = +infinity: x >= lower_bound.
  /// - Can form the infinite interval: lower_bound = -infinity and
  ///   upper_bound = +infinity, x is free.
  /// MPVariableProto furthermore stores:
  ///  - The coefficient of the variable in the objective.
  ///  - Whether the variable is integer.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPVariableProto : pb::IMessage<MPVariableProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPVariableProto> _parser = new pb::MessageParser<MPVariableProto>(() => new MPVariableProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPVariableProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPVariableProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPVariableProto(MPVariableProto other) : this() {
      _hasBits0 = other._hasBits0;
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      objectiveCoefficient_ = other.objectiveCoefficient_;
      isInteger_ = other.isInteger_;
      name_ = other.name_;
      branchingPriority_ = other.branchingPriority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPVariableProto Clone() {
      return new MPVariableProto(this);
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 1;
    private readonly static double LowerBoundDefaultValue = double.NegativeInfinity;

    private double lowerBound_;
    /// <summary>
    /// lower_bound must be &lt;= upper_bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LowerBound {
      get { if ((_hasBits0 & 1) != 0) { return lowerBound_; } else { return LowerBoundDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lowerBound_ = value;
      }
    }
    /// <summary>Gets whether the "lower_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLowerBound {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lower_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLowerBound() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 2;
    private readonly static double UpperBoundDefaultValue = double.PositiveInfinity;

    private double upperBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UpperBound {
      get { if ((_hasBits0 & 2) != 0) { return upperBound_; } else { return UpperBoundDefaultValue; } }
      set {
        _hasBits0 |= 2;
        upperBound_ = value;
      }
    }
    /// <summary>Gets whether the "upper_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpperBound {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "upper_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpperBound() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "objective_coefficient" field.</summary>
    public const int ObjectiveCoefficientFieldNumber = 3;
    private readonly static double ObjectiveCoefficientDefaultValue = 0D;

    private double objectiveCoefficient_;
    /// <summary>
    /// The coefficient of the variable in the objective. Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ObjectiveCoefficient {
      get { if ((_hasBits0 & 4) != 0) { return objectiveCoefficient_; } else { return ObjectiveCoefficientDefaultValue; } }
      set {
        _hasBits0 |= 4;
        objectiveCoefficient_ = value;
      }
    }
    /// <summary>Gets whether the "objective_coefficient" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObjectiveCoefficient {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "objective_coefficient" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObjectiveCoefficient() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_integer" field.</summary>
    public const int IsIntegerFieldNumber = 4;
    private readonly static bool IsIntegerDefaultValue = false;

    private bool isInteger_;
    /// <summary>
    /// True if the variable is constrained to be integer.
    /// Ignored if MPModelProto::solver_type is *LINEAR_PROGRAMMING*.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInteger {
      get { if ((_hasBits0 & 8) != 0) { return isInteger_; } else { return IsIntegerDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isInteger_ = value;
      }
    }
    /// <summary>Gets whether the "is_integer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInteger {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_integer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInteger() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The name of the variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "branching_priority" field.</summary>
    public const int BranchingPriorityFieldNumber = 6;
    private readonly static int BranchingPriorityDefaultValue = 0;

    private int branchingPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BranchingPriority {
      get { if ((_hasBits0 & 16) != 0) { return branchingPriority_; } else { return BranchingPriorityDefaultValue; } }
      set {
        _hasBits0 |= 16;
        branchingPriority_ = value;
      }
    }
    /// <summary>Gets whether the "branching_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBranchingPriority {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "branching_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBranchingPriority() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPVariableProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPVariableProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerBound, other.LowerBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperBound, other.UpperBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectiveCoefficient, other.ObjectiveCoefficient)) return false;
      if (IsInteger != other.IsInteger) return false;
      if (Name != other.Name) return false;
      if (BranchingPriority != other.BranchingPriority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLowerBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerBound);
      if (HasUpperBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperBound);
      if (HasObjectiveCoefficient) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectiveCoefficient);
      if (HasIsInteger) hash ^= IsInteger.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasBranchingPriority) hash ^= BranchingPriority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLowerBound) {
        output.WriteRawTag(9);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(17);
        output.WriteDouble(UpperBound);
      }
      if (HasObjectiveCoefficient) {
        output.WriteRawTag(25);
        output.WriteDouble(ObjectiveCoefficient);
      }
      if (HasIsInteger) {
        output.WriteRawTag(32);
        output.WriteBool(IsInteger);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (HasBranchingPriority) {
        output.WriteRawTag(48);
        output.WriteInt32(BranchingPriority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLowerBound) {
        output.WriteRawTag(9);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(17);
        output.WriteDouble(UpperBound);
      }
      if (HasObjectiveCoefficient) {
        output.WriteRawTag(25);
        output.WriteDouble(ObjectiveCoefficient);
      }
      if (HasIsInteger) {
        output.WriteRawTag(32);
        output.WriteBool(IsInteger);
      }
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (HasBranchingPriority) {
        output.WriteRawTag(48);
        output.WriteInt32(BranchingPriority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasLowerBound) {
        size += 1 + 8;
      }
      if (HasUpperBound) {
        size += 1 + 8;
      }
      if (HasObjectiveCoefficient) {
        size += 1 + 8;
      }
      if (HasIsInteger) {
        size += 1 + 1;
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasBranchingPriority) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BranchingPriority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPVariableProto other) {
      if (other == null) {
        return;
      }
      if (other.HasLowerBound) {
        LowerBound = other.LowerBound;
      }
      if (other.HasUpperBound) {
        UpperBound = other.UpperBound;
      }
      if (other.HasObjectiveCoefficient) {
        ObjectiveCoefficient = other.ObjectiveCoefficient;
      }
      if (other.HasIsInteger) {
        IsInteger = other.IsInteger;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasBranchingPriority) {
        BranchingPriority = other.BranchingPriority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 17: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 25: {
            ObjectiveCoefficient = input.ReadDouble();
            break;
          }
          case 32: {
            IsInteger = input.ReadBool();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            BranchingPriority = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 17: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 25: {
            ObjectiveCoefficient = input.ReadDouble();
            break;
          }
          case 32: {
            IsInteger = input.ReadBool();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            BranchingPriority = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A linear constraint is always of the form:
  /// lower_bound &lt;= sum of linear term elements &lt;= upper_bound,
  /// where lower_bound and upper_bound:
  /// - Can form a singleton: lower_bound == upper_bound. The constraint is an
  ///   equation.
  /// - Can form a finite interval [lower_bound, upper_bound]. The constraint is
  ///   both lower- and upper-bounded, i.e. "boxed".
  /// - Can form a semi-infinite interval. lower_bound = -infinity: the constraint
  ///   is upper-bounded. upper_bound = +infinity: the constraint is lower-bounded.
  /// - Can form the infinite interval: lower_bound = -infinity and
  ///   upper_bound = +infinity. The constraint is free.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPConstraintProto : pb::IMessage<MPConstraintProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPConstraintProto> _parser = new pb::MessageParser<MPConstraintProto>(() => new MPConstraintProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPConstraintProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPConstraintProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPConstraintProto(MPConstraintProto other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_.Clone();
      coefficient_ = other.coefficient_.Clone();
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      name_ = other.name_;
      isLazy_ = other.isLazy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPConstraintProto Clone() {
      return new MPConstraintProto(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// var_index[i] is the variable index (w.r.t. to "variable" field of
    /// MPModelProto) of the i-th linear term involved in this constraint, and
    /// coefficient[i] is its coefficient. Only the terms with non-zero
    /// coefficients need to appear. var_index may not contain duplicates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "coefficient" field.</summary>
    public const int CoefficientFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_coefficient_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> coefficient_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Coefficient {
      get { return coefficient_; }
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 2;
    private readonly static double LowerBoundDefaultValue = double.NegativeInfinity;

    private double lowerBound_;
    /// <summary>
    /// lower_bound must be &lt;= upper_bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LowerBound {
      get { if ((_hasBits0 & 1) != 0) { return lowerBound_; } else { return LowerBoundDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lowerBound_ = value;
      }
    }
    /// <summary>Gets whether the "lower_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLowerBound {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lower_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLowerBound() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 3;
    private readonly static double UpperBoundDefaultValue = double.PositiveInfinity;

    private double upperBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UpperBound {
      get { if ((_hasBits0 & 2) != 0) { return upperBound_; } else { return UpperBoundDefaultValue; } }
      set {
        _hasBits0 |= 2;
        upperBound_ = value;
      }
    }
    /// <summary>Gets whether the "upper_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpperBound {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "upper_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpperBound() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The name of the constraint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "is_lazy" field.</summary>
    public const int IsLazyFieldNumber = 5;
    private readonly static bool IsLazyDefaultValue = false;

    private bool isLazy_;
    /// <summary>
    /// [Advanced usage: do not use this if you don't know what you're doing.]
    /// A lazy constraint is handled differently by the core solving engine, but
    /// it does not change the result. It may or may not impact the performance.
    /// For more info see: http://tinyurl.com/lazy-constraints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLazy {
      get { if ((_hasBits0 & 4) != 0) { return isLazy_; } else { return IsLazyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isLazy_ = value;
      }
    }
    /// <summary>Gets whether the "is_lazy" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLazy {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_lazy" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLazy() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPConstraintProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPConstraintProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if(!coefficient_.Equals(other.coefficient_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerBound, other.LowerBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperBound, other.UpperBound)) return false;
      if (Name != other.Name) return false;
      if (IsLazy != other.IsLazy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= varIndex_.GetHashCode();
      hash ^= coefficient_.GetHashCode();
      if (HasLowerBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerBound);
      if (HasUpperBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperBound);
      if (HasName) hash ^= Name.GetHashCode();
      if (HasIsLazy) hash ^= IsLazy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasLowerBound) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperBound);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIsLazy) {
        output.WriteRawTag(40);
        output.WriteBool(IsLazy);
      }
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      coefficient_.WriteTo(output, _repeated_coefficient_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasLowerBound) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperBound);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasIsLazy) {
        output.WriteRawTag(40);
        output.WriteBool(IsLazy);
      }
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      coefficient_.WriteTo(ref output, _repeated_coefficient_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      size += coefficient_.CalculateSize(_repeated_coefficient_codec);
      if (HasLowerBound) {
        size += 1 + 8;
      }
      if (HasUpperBound) {
        size += 1 + 8;
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasIsLazy) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPConstraintProto other) {
      if (other == null) {
        return;
      }
      varIndex_.Add(other.varIndex_);
      coefficient_.Add(other.coefficient_);
      if (other.HasLowerBound) {
        LowerBound = other.LowerBound;
      }
      if (other.HasUpperBound) {
        UpperBound = other.UpperBound;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIsLazy) {
        IsLazy = other.IsLazy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 17: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 25: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            IsLazy = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 58:
          case 57: {
            coefficient_.AddEntriesFrom(input, _repeated_coefficient_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 17: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 25: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            IsLazy = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 58:
          case 57: {
            coefficient_.AddEntriesFrom(ref input, _repeated_coefficient_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// General constraints. See each individual proto type for more information.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPGeneralConstraintProto : pb::IMessage<MPGeneralConstraintProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPGeneralConstraintProto> _parser = new pb::MessageParser<MPGeneralConstraintProto>(() => new MPGeneralConstraintProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPGeneralConstraintProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPGeneralConstraintProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPGeneralConstraintProto(MPGeneralConstraintProto other) : this() {
      name_ = other.name_;
      switch (other.GeneralConstraintCase) {
        case GeneralConstraintOneofCase.IndicatorConstraint:
          IndicatorConstraint = other.IndicatorConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.SosConstraint:
          SosConstraint = other.SosConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.QuadraticConstraint:
          QuadraticConstraint = other.QuadraticConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.AbsConstraint:
          AbsConstraint = other.AbsConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.AndConstraint:
          AndConstraint = other.AndConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.OrConstraint:
          OrConstraint = other.OrConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.MinConstraint:
          MinConstraint = other.MinConstraint.Clone();
          break;
        case GeneralConstraintOneofCase.MaxConstraint:
          MaxConstraint = other.MaxConstraint.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPGeneralConstraintProto Clone() {
      return new MPGeneralConstraintProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The name of the constraint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "indicator_constraint" field.</summary>
    public const int IndicatorConstraintFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPIndicatorConstraint IndicatorConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint ? (global::OperationsResearch.MPIndicatorConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.IndicatorConstraint;
      }
    }

    /// <summary>Field number for the "sos_constraint" field.</summary>
    public const int SosConstraintFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPSosConstraint SosConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint ? (global::OperationsResearch.MPSosConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.SosConstraint;
      }
    }

    /// <summary>Field number for the "quadratic_constraint" field.</summary>
    public const int QuadraticConstraintFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPQuadraticConstraint QuadraticConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint ? (global::OperationsResearch.MPQuadraticConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.QuadraticConstraint;
      }
    }

    /// <summary>Field number for the "abs_constraint" field.</summary>
    public const int AbsConstraintFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPAbsConstraint AbsConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint ? (global::OperationsResearch.MPAbsConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.AbsConstraint;
      }
    }

    /// <summary>Field number for the "and_constraint" field.</summary>
    public const int AndConstraintFieldNumber = 6;
    /// <summary>
    /// All variables in "and" constraints must be Boolean.
    /// resultant_var = and(var_1, var_2... var_n)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPArrayConstraint AndConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint ? (global::OperationsResearch.MPArrayConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.AndConstraint;
      }
    }

    /// <summary>Field number for the "or_constraint" field.</summary>
    public const int OrConstraintFieldNumber = 7;
    /// <summary>
    /// All variables in "or" constraints must be Boolean.
    /// resultant_var = or(var_1, var_2... var_n)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPArrayConstraint OrConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint ? (global::OperationsResearch.MPArrayConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.OrConstraint;
      }
    }

    /// <summary>Field number for the "min_constraint" field.</summary>
    public const int MinConstraintFieldNumber = 8;
    /// <summary>
    /// resultant_var = min(var_1, var_2, ..., constant)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPArrayWithConstantConstraint MinConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint ? (global::OperationsResearch.MPArrayWithConstantConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.MinConstraint;
      }
    }

    /// <summary>Field number for the "max_constraint" field.</summary>
    public const int MaxConstraintFieldNumber = 9;
    /// <summary>
    /// resultant_var = max(var_1, var_2, ..., constant)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPArrayWithConstantConstraint MaxConstraint {
      get { return generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint ? (global::OperationsResearch.MPArrayWithConstantConstraint) generalConstraint_ : null; }
      set {
        generalConstraint_ = value;
        generalConstraintCase_ = value == null ? GeneralConstraintOneofCase.None : GeneralConstraintOneofCase.MaxConstraint;
      }
    }

    private object generalConstraint_;
    /// <summary>Enum of possible cases for the "general_constraint" oneof.</summary>
    public enum GeneralConstraintOneofCase {
      None = 0,
      IndicatorConstraint = 2,
      SosConstraint = 3,
      QuadraticConstraint = 4,
      AbsConstraint = 5,
      AndConstraint = 6,
      OrConstraint = 7,
      MinConstraint = 8,
      MaxConstraint = 9,
    }
    private GeneralConstraintOneofCase generalConstraintCase_ = GeneralConstraintOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeneralConstraintOneofCase GeneralConstraintCase {
      get { return generalConstraintCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGeneralConstraint() {
      generalConstraintCase_ = GeneralConstraintOneofCase.None;
      generalConstraint_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPGeneralConstraintProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPGeneralConstraintProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(IndicatorConstraint, other.IndicatorConstraint)) return false;
      if (!object.Equals(SosConstraint, other.SosConstraint)) return false;
      if (!object.Equals(QuadraticConstraint, other.QuadraticConstraint)) return false;
      if (!object.Equals(AbsConstraint, other.AbsConstraint)) return false;
      if (!object.Equals(AndConstraint, other.AndConstraint)) return false;
      if (!object.Equals(OrConstraint, other.OrConstraint)) return false;
      if (!object.Equals(MinConstraint, other.MinConstraint)) return false;
      if (!object.Equals(MaxConstraint, other.MaxConstraint)) return false;
      if (GeneralConstraintCase != other.GeneralConstraintCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) hash ^= IndicatorConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) hash ^= SosConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) hash ^= QuadraticConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) hash ^= AbsConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) hash ^= AndConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) hash ^= OrConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) hash ^= MinConstraint.GetHashCode();
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) hash ^= MaxConstraint.GetHashCode();
      hash ^= (int) generalConstraintCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) {
        output.WriteRawTag(18);
        output.WriteMessage(IndicatorConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) {
        output.WriteRawTag(26);
        output.WriteMessage(SosConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) {
        output.WriteRawTag(34);
        output.WriteMessage(QuadraticConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) {
        output.WriteRawTag(42);
        output.WriteMessage(AbsConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) {
        output.WriteRawTag(50);
        output.WriteMessage(AndConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) {
        output.WriteRawTag(58);
        output.WriteMessage(OrConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) {
        output.WriteRawTag(66);
        output.WriteMessage(MinConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) {
        output.WriteRawTag(74);
        output.WriteMessage(MaxConstraint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) {
        output.WriteRawTag(18);
        output.WriteMessage(IndicatorConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) {
        output.WriteRawTag(26);
        output.WriteMessage(SosConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) {
        output.WriteRawTag(34);
        output.WriteMessage(QuadraticConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) {
        output.WriteRawTag(42);
        output.WriteMessage(AbsConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) {
        output.WriteRawTag(50);
        output.WriteMessage(AndConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) {
        output.WriteRawTag(58);
        output.WriteMessage(OrConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) {
        output.WriteRawTag(66);
        output.WriteMessage(MinConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) {
        output.WriteRawTag(74);
        output.WriteMessage(MaxConstraint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IndicatorConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SosConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuadraticConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AbsConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AndConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinConstraint);
      }
      if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxConstraint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPGeneralConstraintProto other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      switch (other.GeneralConstraintCase) {
        case GeneralConstraintOneofCase.IndicatorConstraint:
          if (IndicatorConstraint == null) {
            IndicatorConstraint = new global::OperationsResearch.MPIndicatorConstraint();
          }
          IndicatorConstraint.MergeFrom(other.IndicatorConstraint);
          break;
        case GeneralConstraintOneofCase.SosConstraint:
          if (SosConstraint == null) {
            SosConstraint = new global::OperationsResearch.MPSosConstraint();
          }
          SosConstraint.MergeFrom(other.SosConstraint);
          break;
        case GeneralConstraintOneofCase.QuadraticConstraint:
          if (QuadraticConstraint == null) {
            QuadraticConstraint = new global::OperationsResearch.MPQuadraticConstraint();
          }
          QuadraticConstraint.MergeFrom(other.QuadraticConstraint);
          break;
        case GeneralConstraintOneofCase.AbsConstraint:
          if (AbsConstraint == null) {
            AbsConstraint = new global::OperationsResearch.MPAbsConstraint();
          }
          AbsConstraint.MergeFrom(other.AbsConstraint);
          break;
        case GeneralConstraintOneofCase.AndConstraint:
          if (AndConstraint == null) {
            AndConstraint = new global::OperationsResearch.MPArrayConstraint();
          }
          AndConstraint.MergeFrom(other.AndConstraint);
          break;
        case GeneralConstraintOneofCase.OrConstraint:
          if (OrConstraint == null) {
            OrConstraint = new global::OperationsResearch.MPArrayConstraint();
          }
          OrConstraint.MergeFrom(other.OrConstraint);
          break;
        case GeneralConstraintOneofCase.MinConstraint:
          if (MinConstraint == null) {
            MinConstraint = new global::OperationsResearch.MPArrayWithConstantConstraint();
          }
          MinConstraint.MergeFrom(other.MinConstraint);
          break;
        case GeneralConstraintOneofCase.MaxConstraint:
          if (MaxConstraint == null) {
            MaxConstraint = new global::OperationsResearch.MPArrayWithConstantConstraint();
          }
          MaxConstraint.MergeFrom(other.MaxConstraint);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::OperationsResearch.MPIndicatorConstraint subBuilder = new global::OperationsResearch.MPIndicatorConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) {
              subBuilder.MergeFrom(IndicatorConstraint);
            }
            input.ReadMessage(subBuilder);
            IndicatorConstraint = subBuilder;
            break;
          }
          case 26: {
            global::OperationsResearch.MPSosConstraint subBuilder = new global::OperationsResearch.MPSosConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) {
              subBuilder.MergeFrom(SosConstraint);
            }
            input.ReadMessage(subBuilder);
            SosConstraint = subBuilder;
            break;
          }
          case 34: {
            global::OperationsResearch.MPQuadraticConstraint subBuilder = new global::OperationsResearch.MPQuadraticConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) {
              subBuilder.MergeFrom(QuadraticConstraint);
            }
            input.ReadMessage(subBuilder);
            QuadraticConstraint = subBuilder;
            break;
          }
          case 42: {
            global::OperationsResearch.MPAbsConstraint subBuilder = new global::OperationsResearch.MPAbsConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) {
              subBuilder.MergeFrom(AbsConstraint);
            }
            input.ReadMessage(subBuilder);
            AbsConstraint = subBuilder;
            break;
          }
          case 50: {
            global::OperationsResearch.MPArrayConstraint subBuilder = new global::OperationsResearch.MPArrayConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) {
              subBuilder.MergeFrom(AndConstraint);
            }
            input.ReadMessage(subBuilder);
            AndConstraint = subBuilder;
            break;
          }
          case 58: {
            global::OperationsResearch.MPArrayConstraint subBuilder = new global::OperationsResearch.MPArrayConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) {
              subBuilder.MergeFrom(OrConstraint);
            }
            input.ReadMessage(subBuilder);
            OrConstraint = subBuilder;
            break;
          }
          case 66: {
            global::OperationsResearch.MPArrayWithConstantConstraint subBuilder = new global::OperationsResearch.MPArrayWithConstantConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) {
              subBuilder.MergeFrom(MinConstraint);
            }
            input.ReadMessage(subBuilder);
            MinConstraint = subBuilder;
            break;
          }
          case 74: {
            global::OperationsResearch.MPArrayWithConstantConstraint subBuilder = new global::OperationsResearch.MPArrayWithConstantConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) {
              subBuilder.MergeFrom(MaxConstraint);
            }
            input.ReadMessage(subBuilder);
            MaxConstraint = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            global::OperationsResearch.MPIndicatorConstraint subBuilder = new global::OperationsResearch.MPIndicatorConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.IndicatorConstraint) {
              subBuilder.MergeFrom(IndicatorConstraint);
            }
            input.ReadMessage(subBuilder);
            IndicatorConstraint = subBuilder;
            break;
          }
          case 26: {
            global::OperationsResearch.MPSosConstraint subBuilder = new global::OperationsResearch.MPSosConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.SosConstraint) {
              subBuilder.MergeFrom(SosConstraint);
            }
            input.ReadMessage(subBuilder);
            SosConstraint = subBuilder;
            break;
          }
          case 34: {
            global::OperationsResearch.MPQuadraticConstraint subBuilder = new global::OperationsResearch.MPQuadraticConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.QuadraticConstraint) {
              subBuilder.MergeFrom(QuadraticConstraint);
            }
            input.ReadMessage(subBuilder);
            QuadraticConstraint = subBuilder;
            break;
          }
          case 42: {
            global::OperationsResearch.MPAbsConstraint subBuilder = new global::OperationsResearch.MPAbsConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.AbsConstraint) {
              subBuilder.MergeFrom(AbsConstraint);
            }
            input.ReadMessage(subBuilder);
            AbsConstraint = subBuilder;
            break;
          }
          case 50: {
            global::OperationsResearch.MPArrayConstraint subBuilder = new global::OperationsResearch.MPArrayConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.AndConstraint) {
              subBuilder.MergeFrom(AndConstraint);
            }
            input.ReadMessage(subBuilder);
            AndConstraint = subBuilder;
            break;
          }
          case 58: {
            global::OperationsResearch.MPArrayConstraint subBuilder = new global::OperationsResearch.MPArrayConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.OrConstraint) {
              subBuilder.MergeFrom(OrConstraint);
            }
            input.ReadMessage(subBuilder);
            OrConstraint = subBuilder;
            break;
          }
          case 66: {
            global::OperationsResearch.MPArrayWithConstantConstraint subBuilder = new global::OperationsResearch.MPArrayWithConstantConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.MinConstraint) {
              subBuilder.MergeFrom(MinConstraint);
            }
            input.ReadMessage(subBuilder);
            MinConstraint = subBuilder;
            break;
          }
          case 74: {
            global::OperationsResearch.MPArrayWithConstantConstraint subBuilder = new global::OperationsResearch.MPArrayWithConstantConstraint();
            if (generalConstraintCase_ == GeneralConstraintOneofCase.MaxConstraint) {
              subBuilder.MergeFrom(MaxConstraint);
            }
            input.ReadMessage(subBuilder);
            MaxConstraint = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Indicator constraints encode the activation or deactivation of linear
  /// constraints given the value of one Boolean variable in the model. For
  /// example:
  ///     y = 0 => 2 * x1 + 3 * x2 >= 42
  /// The 2 * x1 + 3 * x2 >= 42 constraint is only active if the variable y is
  /// equal to 0.
  /// As of 2019/04, only SCIP, CP-SAT and Gurobi support this constraint type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPIndicatorConstraint : pb::IMessage<MPIndicatorConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPIndicatorConstraint> _parser = new pb::MessageParser<MPIndicatorConstraint>(() => new MPIndicatorConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPIndicatorConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPIndicatorConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPIndicatorConstraint(MPIndicatorConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_;
      varValue_ = other.varValue_;
      constraint_ = other.constraint_ != null ? other.constraint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPIndicatorConstraint Clone() {
      return new MPIndicatorConstraint(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private readonly static int VarIndexDefaultValue = 0;

    private int varIndex_;
    /// <summary>
    /// Variable index (w.r.t. the "variable" field of MPModelProto) of the Boolean
    /// variable used as indicator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VarIndex {
      get { if ((_hasBits0 & 1) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        varIndex_ = value;
      }
    }
    /// <summary>Gets whether the "var_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVarIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "var_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVarIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "var_value" field.</summary>
    public const int VarValueFieldNumber = 2;
    private readonly static int VarValueDefaultValue = 0;

    private int varValue_;
    /// <summary>
    /// Value the above variable should take. Must be 0 or 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VarValue {
      get { if ((_hasBits0 & 2) != 0) { return varValue_; } else { return VarValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        varValue_ = value;
      }
    }
    /// <summary>Gets whether the "var_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVarValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "var_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVarValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "constraint" field.</summary>
    public const int ConstraintFieldNumber = 3;
    private global::OperationsResearch.MPConstraintProto constraint_;
    /// <summary>
    /// The constraint activated by the indicator variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPConstraintProto Constraint {
      get { return constraint_; }
      set {
        constraint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPIndicatorConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPIndicatorConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarIndex != other.VarIndex) return false;
      if (VarValue != other.VarValue) return false;
      if (!object.Equals(Constraint, other.Constraint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVarIndex) hash ^= VarIndex.GetHashCode();
      if (HasVarValue) hash ^= VarValue.GetHashCode();
      if (constraint_ != null) hash ^= Constraint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVarIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(VarIndex);
      }
      if (HasVarValue) {
        output.WriteRawTag(16);
        output.WriteInt32(VarValue);
      }
      if (constraint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Constraint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVarIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(VarIndex);
      }
      if (HasVarValue) {
        output.WriteRawTag(16);
        output.WriteInt32(VarValue);
      }
      if (constraint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Constraint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVarIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarIndex);
      }
      if (HasVarValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarValue);
      }
      if (constraint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Constraint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPIndicatorConstraint other) {
      if (other == null) {
        return;
      }
      if (other.HasVarIndex) {
        VarIndex = other.VarIndex;
      }
      if (other.HasVarValue) {
        VarValue = other.VarValue;
      }
      if (other.constraint_ != null) {
        if (constraint_ == null) {
          Constraint = new global::OperationsResearch.MPConstraintProto();
        }
        Constraint.MergeFrom(other.Constraint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VarIndex = input.ReadInt32();
            break;
          }
          case 16: {
            VarValue = input.ReadInt32();
            break;
          }
          case 26: {
            if (constraint_ == null) {
              Constraint = new global::OperationsResearch.MPConstraintProto();
            }
            input.ReadMessage(Constraint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VarIndex = input.ReadInt32();
            break;
          }
          case 16: {
            VarValue = input.ReadInt32();
            break;
          }
          case 26: {
            if (constraint_ == null) {
              Constraint = new global::OperationsResearch.MPConstraintProto();
            }
            input.ReadMessage(Constraint);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Special Ordered Set (SOS) constraints of type 1 or 2.
  /// See https://en.wikipedia.org/wiki/Special_ordered_set
  /// As of 2019/04, only SCIP and Gurobi support this constraint type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPSosConstraint : pb::IMessage<MPSosConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPSosConstraint> _parser = new pb::MessageParser<MPSosConstraint>(() => new MPSosConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPSosConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSosConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSosConstraint(MPSosConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      varIndex_ = other.varIndex_.Clone();
      weight_ = other.weight_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSosConstraint Clone() {
      return new MPSosConstraint(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::OperationsResearch.MPSosConstraint.Types.Type TypeDefaultValue = global::OperationsResearch.MPSosConstraint.Types.Type.Sos1Default;

    private global::OperationsResearch.MPSosConstraint.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPSosConstraint.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Variable index (w.r.t. the "variable" field of MPModelProto) of the
    /// variables in the SOS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_weight_codec
        = pb::FieldCodec.ForDouble(25);
    private readonly pbc::RepeatedField<double> weight_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Optional: SOS weights. If non-empty, must be of the same size as
    /// "var_index", and strictly increasing. If empty and required by the
    /// underlying solver, the 1..n sequence will be given as weights.
    /// SUBTLE: The weights can help the solver make branch-and-bound decisions
    /// that fit the underlying optimization model: after each LP relaxation, it
    /// will compute the "average weight" of the SOS variables, weighted by value
    /// (this is confusing: here we're using the values as weights), and the binary
    /// branch decision will be: is the non-zero variable above or below that?
    /// (weights are strictly monotonous, so the "cutoff" average weight
    /// corresponds to a "cutoff" index in the var_index sequence).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Weight {
      get { return weight_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPSosConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPSosConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if(!weight_.Equals(other.weight_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= varIndex_.GetHashCode();
      hash ^= weight_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      weight_.WriteTo(output, _repeated_weight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      weight_.WriteTo(ref output, _repeated_weight_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      size += weight_.CalculateSize(_repeated_weight_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPSosConstraint other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      varIndex_.Add(other.varIndex_);
      weight_.Add(other.weight_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::OperationsResearch.MPSosConstraint.Types.Type) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 26:
          case 25: {
            weight_.AddEntriesFrom(input, _repeated_weight_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::OperationsResearch.MPSosConstraint.Types.Type) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 26:
          case 25: {
            weight_.AddEntriesFrom(ref input, _repeated_weight_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MPSosConstraint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// At most one variable in `var_index` must be non-zero.
        /// </summary>
        [pbr::OriginalName("SOS1_DEFAULT")] Sos1Default = 0,
        /// <summary>
        /// At most two consecutive variables from `var_index` can be non-zero (i.e.
        /// for some i, var_index[i] and var_index[i+1]). See
        /// https://en.wikipedia.org/wiki/Special_ordered_set#Types_of_SOS
        /// </summary>
        [pbr::OriginalName("SOS2")] Sos2 = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Quadratic constraints of the form lb &lt;= sum a_i x_i + sum b_ij x_i x_j &lt;= ub,
  /// where a, b, lb and ub are constants, and x are the model's variables.
  /// Quadratic matrices that are Positive Semi-Definite, Second-Order Cones or
  /// rotated Second-Order Cones are always accepted. Other forms may or may not be
  /// accepted depending on the underlying solver used.
  /// See https://scip.zib.de/doc/html/cons__quadratic_8h.php and
  /// https://www.gurobi.com/documentation/9.0/refman/constraints.html#subsubsection:QuadraticConstraints
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPQuadraticConstraint : pb::IMessage<MPQuadraticConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPQuadraticConstraint> _parser = new pb::MessageParser<MPQuadraticConstraint>(() => new MPQuadraticConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPQuadraticConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticConstraint(MPQuadraticConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_.Clone();
      coefficient_ = other.coefficient_.Clone();
      qvar1Index_ = other.qvar1Index_.Clone();
      qvar2Index_ = other.qvar2Index_.Clone();
      qcoefficient_ = other.qcoefficient_.Clone();
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticConstraint Clone() {
      return new MPQuadraticConstraint(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Sparse representation of linear terms in the quadratic constraint, where
    /// term i is var_index[i] * coefficient[i].
    /// `var_index` are variable indices w.r.t the "variable" field in
    /// MPModelProto, and should be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "coefficient" field.</summary>
    public const int CoefficientFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_coefficient_codec
        = pb::FieldCodec.ForDouble(17);
    private readonly pbc::RepeatedField<double> coefficient_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Coefficient {
      get { return coefficient_; }
    }

    /// <summary>Field number for the "qvar1_index" field.</summary>
    public const int Qvar1IndexFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_qvar1Index_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> qvar1Index_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Sparse representation of quadratic terms in the quadratic constraint, where
    /// term i is qvar1_index[i] * qvar2_index[i] * qcoefficient[i].
    /// `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
    /// field in MPModelProto.
    /// `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
    /// If the same unordered pair (qvar1_index, qvar2_index) appears several
    /// times, the sum of all of the associated coefficients will be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Qvar1Index {
      get { return qvar1Index_; }
    }

    /// <summary>Field number for the "qvar2_index" field.</summary>
    public const int Qvar2IndexFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_qvar2Index_codec
        = pb::FieldCodec.ForInt32(32);
    private readonly pbc::RepeatedField<int> qvar2Index_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Qvar2Index {
      get { return qvar2Index_; }
    }

    /// <summary>Field number for the "qcoefficient" field.</summary>
    public const int QcoefficientFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_qcoefficient_codec
        = pb::FieldCodec.ForDouble(41);
    private readonly pbc::RepeatedField<double> qcoefficient_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Qcoefficient {
      get { return qcoefficient_; }
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 6;
    private readonly static double LowerBoundDefaultValue = double.NegativeInfinity;

    private double lowerBound_;
    /// <summary>
    /// lower_bound must be &lt;= upper_bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LowerBound {
      get { if ((_hasBits0 & 1) != 0) { return lowerBound_; } else { return LowerBoundDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lowerBound_ = value;
      }
    }
    /// <summary>Gets whether the "lower_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLowerBound {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lower_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLowerBound() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 7;
    private readonly static double UpperBoundDefaultValue = double.PositiveInfinity;

    private double upperBound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UpperBound {
      get { if ((_hasBits0 & 2) != 0) { return upperBound_; } else { return UpperBoundDefaultValue; } }
      set {
        _hasBits0 |= 2;
        upperBound_ = value;
      }
    }
    /// <summary>Gets whether the "upper_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpperBound {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "upper_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpperBound() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPQuadraticConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPQuadraticConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if(!coefficient_.Equals(other.coefficient_)) return false;
      if(!qvar1Index_.Equals(other.qvar1Index_)) return false;
      if(!qvar2Index_.Equals(other.qvar2Index_)) return false;
      if(!qcoefficient_.Equals(other.qcoefficient_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerBound, other.LowerBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperBound, other.UpperBound)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= varIndex_.GetHashCode();
      hash ^= coefficient_.GetHashCode();
      hash ^= qvar1Index_.GetHashCode();
      hash ^= qvar2Index_.GetHashCode();
      hash ^= qcoefficient_.GetHashCode();
      if (HasLowerBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerBound);
      if (HasUpperBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperBound);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      coefficient_.WriteTo(output, _repeated_coefficient_codec);
      qvar1Index_.WriteTo(output, _repeated_qvar1Index_codec);
      qvar2Index_.WriteTo(output, _repeated_qvar2Index_codec);
      qcoefficient_.WriteTo(output, _repeated_qcoefficient_codec);
      if (HasLowerBound) {
        output.WriteRawTag(49);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(57);
        output.WriteDouble(UpperBound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      coefficient_.WriteTo(ref output, _repeated_coefficient_codec);
      qvar1Index_.WriteTo(ref output, _repeated_qvar1Index_codec);
      qvar2Index_.WriteTo(ref output, _repeated_qvar2Index_codec);
      qcoefficient_.WriteTo(ref output, _repeated_qcoefficient_codec);
      if (HasLowerBound) {
        output.WriteRawTag(49);
        output.WriteDouble(LowerBound);
      }
      if (HasUpperBound) {
        output.WriteRawTag(57);
        output.WriteDouble(UpperBound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      size += coefficient_.CalculateSize(_repeated_coefficient_codec);
      size += qvar1Index_.CalculateSize(_repeated_qvar1Index_codec);
      size += qvar2Index_.CalculateSize(_repeated_qvar2Index_codec);
      size += qcoefficient_.CalculateSize(_repeated_qcoefficient_codec);
      if (HasLowerBound) {
        size += 1 + 8;
      }
      if (HasUpperBound) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPQuadraticConstraint other) {
      if (other == null) {
        return;
      }
      varIndex_.Add(other.varIndex_);
      coefficient_.Add(other.coefficient_);
      qvar1Index_.Add(other.qvar1Index_);
      qvar2Index_.Add(other.qvar2Index_);
      qcoefficient_.Add(other.qcoefficient_);
      if (other.HasLowerBound) {
        LowerBound = other.LowerBound;
      }
      if (other.HasUpperBound) {
        UpperBound = other.UpperBound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 18:
          case 17: {
            coefficient_.AddEntriesFrom(input, _repeated_coefficient_codec);
            break;
          }
          case 26:
          case 24: {
            qvar1Index_.AddEntriesFrom(input, _repeated_qvar1Index_codec);
            break;
          }
          case 34:
          case 32: {
            qvar2Index_.AddEntriesFrom(input, _repeated_qvar2Index_codec);
            break;
          }
          case 42:
          case 41: {
            qcoefficient_.AddEntriesFrom(input, _repeated_qcoefficient_codec);
            break;
          }
          case 49: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 57: {
            UpperBound = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 18:
          case 17: {
            coefficient_.AddEntriesFrom(ref input, _repeated_coefficient_codec);
            break;
          }
          case 26:
          case 24: {
            qvar1Index_.AddEntriesFrom(ref input, _repeated_qvar1Index_codec);
            break;
          }
          case 34:
          case 32: {
            qvar2Index_.AddEntriesFrom(ref input, _repeated_qvar2Index_codec);
            break;
          }
          case 42:
          case 41: {
            qcoefficient_.AddEntriesFrom(ref input, _repeated_qcoefficient_codec);
            break;
          }
          case 49: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 57: {
            UpperBound = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Sets a variable's value to the absolute value of another variable.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPAbsConstraint : pb::IMessage<MPAbsConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPAbsConstraint> _parser = new pb::MessageParser<MPAbsConstraint>(() => new MPAbsConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPAbsConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPAbsConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPAbsConstraint(MPAbsConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_;
      resultantVarIndex_ = other.resultantVarIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPAbsConstraint Clone() {
      return new MPAbsConstraint(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private readonly static int VarIndexDefaultValue = 0;

    private int varIndex_;
    /// <summary>
    /// Variable indices are relative to the "variable" field in MPModelProto.
    /// resultant_var = abs(var)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VarIndex {
      get { if ((_hasBits0 & 1) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        varIndex_ = value;
      }
    }
    /// <summary>Gets whether the "var_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVarIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "var_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVarIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "resultant_var_index" field.</summary>
    public const int ResultantVarIndexFieldNumber = 2;
    private readonly static int ResultantVarIndexDefaultValue = 0;

    private int resultantVarIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ResultantVarIndex {
      get { if ((_hasBits0 & 2) != 0) { return resultantVarIndex_; } else { return ResultantVarIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        resultantVarIndex_ = value;
      }
    }
    /// <summary>Gets whether the "resultant_var_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasResultantVarIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "resultant_var_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResultantVarIndex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPAbsConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPAbsConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VarIndex != other.VarIndex) return false;
      if (ResultantVarIndex != other.ResultantVarIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVarIndex) hash ^= VarIndex.GetHashCode();
      if (HasResultantVarIndex) hash ^= ResultantVarIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVarIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(VarIndex);
      }
      if (HasResultantVarIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVarIndex) {
        output.WriteRawTag(8);
        output.WriteInt32(VarIndex);
      }
      if (HasResultantVarIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasVarIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarIndex);
      }
      if (HasResultantVarIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPAbsConstraint other) {
      if (other == null) {
        return;
      }
      if (other.HasVarIndex) {
        VarIndex = other.VarIndex;
      }
      if (other.HasResultantVarIndex) {
        ResultantVarIndex = other.ResultantVarIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VarIndex = input.ReadInt32();
            break;
          }
          case 16: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VarIndex = input.ReadInt32();
            break;
          }
          case 16: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Sets a variable's value equal to a function on a set of variables.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPArrayConstraint : pb::IMessage<MPArrayConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPArrayConstraint> _parser = new pb::MessageParser<MPArrayConstraint>(() => new MPArrayConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPArrayConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayConstraint(MPArrayConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_.Clone();
      resultantVarIndex_ = other.resultantVarIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayConstraint Clone() {
      return new MPArrayConstraint(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Variable indices are relative to the "variable" field in MPModelProto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "resultant_var_index" field.</summary>
    public const int ResultantVarIndexFieldNumber = 2;
    private readonly static int ResultantVarIndexDefaultValue = 0;

    private int resultantVarIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ResultantVarIndex {
      get { if ((_hasBits0 & 1) != 0) { return resultantVarIndex_; } else { return ResultantVarIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        resultantVarIndex_ = value;
      }
    }
    /// <summary>Gets whether the "resultant_var_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasResultantVarIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "resultant_var_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResultantVarIndex() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPArrayConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPArrayConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if (ResultantVarIndex != other.ResultantVarIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= varIndex_.GetHashCode();
      if (HasResultantVarIndex) hash ^= ResultantVarIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      if (HasResultantVarIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      if (HasResultantVarIndex) {
        output.WriteRawTag(16);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      if (HasResultantVarIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPArrayConstraint other) {
      if (other == null) {
        return;
      }
      varIndex_.Add(other.varIndex_);
      if (other.HasResultantVarIndex) {
        ResultantVarIndex = other.ResultantVarIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 16: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 16: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Sets a variable's value equal to a function on a set of variables and,
  /// optionally, a constant.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPArrayWithConstantConstraint : pb::IMessage<MPArrayWithConstantConstraint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPArrayWithConstantConstraint> _parser = new pb::MessageParser<MPArrayWithConstantConstraint>(() => new MPArrayWithConstantConstraint());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPArrayWithConstantConstraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayWithConstantConstraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayWithConstantConstraint(MPArrayWithConstantConstraint other) : this() {
      _hasBits0 = other._hasBits0;
      varIndex_ = other.varIndex_.Clone();
      constant_ = other.constant_;
      resultantVarIndex_ = other.resultantVarIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPArrayWithConstantConstraint Clone() {
      return new MPArrayWithConstantConstraint(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Variable indices are relative to the "variable" field in MPModelProto.
    /// resultant_var = f(var_1, var_2, ..., constant)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "constant" field.</summary>
    public const int ConstantFieldNumber = 2;
    private readonly static double ConstantDefaultValue = 0D;

    private double constant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Constant {
      get { if ((_hasBits0 & 1) != 0) { return constant_; } else { return ConstantDefaultValue; } }
      set {
        _hasBits0 |= 1;
        constant_ = value;
      }
    }
    /// <summary>Gets whether the "constant" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConstant {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "constant" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConstant() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "resultant_var_index" field.</summary>
    public const int ResultantVarIndexFieldNumber = 3;
    private readonly static int ResultantVarIndexDefaultValue = 0;

    private int resultantVarIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ResultantVarIndex {
      get { if ((_hasBits0 & 2) != 0) { return resultantVarIndex_; } else { return ResultantVarIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        resultantVarIndex_ = value;
      }
    }
    /// <summary>Gets whether the "resultant_var_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasResultantVarIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "resultant_var_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearResultantVarIndex() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPArrayWithConstantConstraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPArrayWithConstantConstraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Constant, other.Constant)) return false;
      if (ResultantVarIndex != other.ResultantVarIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= varIndex_.GetHashCode();
      if (HasConstant) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Constant);
      if (HasResultantVarIndex) hash ^= ResultantVarIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      if (HasConstant) {
        output.WriteRawTag(17);
        output.WriteDouble(Constant);
      }
      if (HasResultantVarIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      if (HasConstant) {
        output.WriteRawTag(17);
        output.WriteDouble(Constant);
      }
      if (HasResultantVarIndex) {
        output.WriteRawTag(24);
        output.WriteInt32(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      if (HasConstant) {
        size += 1 + 8;
      }
      if (HasResultantVarIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultantVarIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPArrayWithConstantConstraint other) {
      if (other == null) {
        return;
      }
      varIndex_.Add(other.varIndex_);
      if (other.HasConstant) {
        Constant = other.Constant;
      }
      if (other.HasResultantVarIndex) {
        ResultantVarIndex = other.ResultantVarIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 17: {
            Constant = input.ReadDouble();
            break;
          }
          case 24: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 17: {
            Constant = input.ReadDouble();
            break;
          }
          case 24: {
            ResultantVarIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Quadratic part of a model's objective. Added with other objectives (such as
  /// linear), this creates the model's objective function to be optimized.
  /// Note: the linear part of the objective currently needs to be specified in the
  /// MPVariableProto.objective_coefficient fields. If you'd rather have a
  /// dedicated linear array here, talk to or-core-team@
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPQuadraticObjective : pb::IMessage<MPQuadraticObjective>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPQuadraticObjective> _parser = new pb::MessageParser<MPQuadraticObjective>(() => new MPQuadraticObjective());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPQuadraticObjective> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticObjective() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticObjective(MPQuadraticObjective other) : this() {
      qvar1Index_ = other.qvar1Index_.Clone();
      qvar2Index_ = other.qvar2Index_.Clone();
      coefficient_ = other.coefficient_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPQuadraticObjective Clone() {
      return new MPQuadraticObjective(this);
    }

    /// <summary>Field number for the "qvar1_index" field.</summary>
    public const int Qvar1IndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_qvar1Index_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> qvar1Index_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Sparse representation of quadratic terms in the objective function, where
    /// term i is qvar1_index[i] * qvar2_index[i] * coefficient[i].
    /// `qvar1_index` and `qvar2_index` are variable indices w.r.t the "variable"
    /// field in MPModelProto.
    /// `qvar1_index`, `qvar2_index` and `coefficients` must have the same size.
    /// If the same unordered pair (qvar1_index, qvar2_index) appears several
    /// times, the sum of all of the associated coefficients will be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Qvar1Index {
      get { return qvar1Index_; }
    }

    /// <summary>Field number for the "qvar2_index" field.</summary>
    public const int Qvar2IndexFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_qvar2Index_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> qvar2Index_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Qvar2Index {
      get { return qvar2Index_; }
    }

    /// <summary>Field number for the "coefficient" field.</summary>
    public const int CoefficientFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_coefficient_codec
        = pb::FieldCodec.ForDouble(25);
    private readonly pbc::RepeatedField<double> coefficient_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Coefficient {
      get { return coefficient_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPQuadraticObjective);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPQuadraticObjective other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!qvar1Index_.Equals(other.qvar1Index_)) return false;
      if(!qvar2Index_.Equals(other.qvar2Index_)) return false;
      if(!coefficient_.Equals(other.coefficient_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= qvar1Index_.GetHashCode();
      hash ^= qvar2Index_.GetHashCode();
      hash ^= coefficient_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      qvar1Index_.WriteTo(output, _repeated_qvar1Index_codec);
      qvar2Index_.WriteTo(output, _repeated_qvar2Index_codec);
      coefficient_.WriteTo(output, _repeated_coefficient_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      qvar1Index_.WriteTo(ref output, _repeated_qvar1Index_codec);
      qvar2Index_.WriteTo(ref output, _repeated_qvar2Index_codec);
      coefficient_.WriteTo(ref output, _repeated_coefficient_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += qvar1Index_.CalculateSize(_repeated_qvar1Index_codec);
      size += qvar2Index_.CalculateSize(_repeated_qvar2Index_codec);
      size += coefficient_.CalculateSize(_repeated_coefficient_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPQuadraticObjective other) {
      if (other == null) {
        return;
      }
      qvar1Index_.Add(other.qvar1Index_);
      qvar2Index_.Add(other.qvar2Index_);
      coefficient_.Add(other.coefficient_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            qvar1Index_.AddEntriesFrom(input, _repeated_qvar1Index_codec);
            break;
          }
          case 18:
          case 16: {
            qvar2Index_.AddEntriesFrom(input, _repeated_qvar2Index_codec);
            break;
          }
          case 26:
          case 25: {
            coefficient_.AddEntriesFrom(input, _repeated_coefficient_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            qvar1Index_.AddEntriesFrom(ref input, _repeated_qvar1Index_codec);
            break;
          }
          case 18:
          case 16: {
            qvar2Index_.AddEntriesFrom(ref input, _repeated_qvar2Index_codec);
            break;
          }
          case 26:
          case 25: {
            coefficient_.AddEntriesFrom(ref input, _repeated_coefficient_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This message encodes a partial (or full) assignment of the variables of a
  /// MPModelProto problem. The indices in var_index should be unique and valid
  /// variable indices of the associated problem.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PartialVariableAssignment : pb::IMessage<PartialVariableAssignment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PartialVariableAssignment> _parser = new pb::MessageParser<PartialVariableAssignment>(() => new PartialVariableAssignment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PartialVariableAssignment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PartialVariableAssignment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PartialVariableAssignment(PartialVariableAssignment other) : this() {
      varIndex_ = other.varIndex_.Clone();
      varValue_ = other.varValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PartialVariableAssignment Clone() {
      return new PartialVariableAssignment(this);
    }

    /// <summary>Field number for the "var_index" field.</summary>
    public const int VarIndexFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_varIndex_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> varIndex_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> VarIndex {
      get { return varIndex_; }
    }

    /// <summary>Field number for the "var_value" field.</summary>
    public const int VarValueFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_varValue_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> varValue_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VarValue {
      get { return varValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PartialVariableAssignment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PartialVariableAssignment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!varIndex_.Equals(other.varIndex_)) return false;
      if(!varValue_.Equals(other.varValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= varIndex_.GetHashCode();
      hash ^= varValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      varIndex_.WriteTo(output, _repeated_varIndex_codec);
      varValue_.WriteTo(output, _repeated_varValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      varIndex_.WriteTo(ref output, _repeated_varIndex_codec);
      varValue_.WriteTo(ref output, _repeated_varValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += varIndex_.CalculateSize(_repeated_varIndex_codec);
      size += varValue_.CalculateSize(_repeated_varValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PartialVariableAssignment other) {
      if (other == null) {
        return;
      }
      varIndex_.Add(other.varIndex_);
      varValue_.Add(other.varValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(input, _repeated_varIndex_codec);
            break;
          }
          case 18:
          case 17: {
            varValue_.AddEntriesFrom(input, _repeated_varValue_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            varIndex_.AddEntriesFrom(ref input, _repeated_varIndex_codec);
            break;
          }
          case 18:
          case 17: {
            varValue_.AddEntriesFrom(ref input, _repeated_varValue_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MPModelProto contains all the information for a Linear Programming model.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPModelProto : pb::IMessage<MPModelProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPModelProto> _parser = new pb::MessageParser<MPModelProto>(() => new MPModelProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPModelProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelProto(MPModelProto other) : this() {
      _hasBits0 = other._hasBits0;
      variable_ = other.variable_.Clone();
      constraint_ = other.constraint_.Clone();
      generalConstraint_ = other.generalConstraint_.Clone();
      maximize_ = other.maximize_;
      objectiveOffset_ = other.objectiveOffset_;
      quadraticObjective_ = other.quadraticObjective_ != null ? other.quadraticObjective_.Clone() : null;
      name_ = other.name_;
      solutionHint_ = other.solutionHint_ != null ? other.solutionHint_.Clone() : null;
      annotation_ = other.annotation_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelProto Clone() {
      return new MPModelProto(this);
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 3;
    private static readonly pb::FieldCodec<global::OperationsResearch.MPVariableProto> _repeated_variable_codec
        = pb::FieldCodec.ForMessage(26, global::OperationsResearch.MPVariableProto.Parser);
    private readonly pbc::RepeatedField<global::OperationsResearch.MPVariableProto> variable_ = new pbc::RepeatedField<global::OperationsResearch.MPVariableProto>();
    /// <summary>
    /// All the variables appearing in the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OperationsResearch.MPVariableProto> Variable {
      get { return variable_; }
    }

    /// <summary>Field number for the "constraint" field.</summary>
    public const int ConstraintFieldNumber = 4;
    private static readonly pb::FieldCodec<global::OperationsResearch.MPConstraintProto> _repeated_constraint_codec
        = pb::FieldCodec.ForMessage(34, global::OperationsResearch.MPConstraintProto.Parser);
    private readonly pbc::RepeatedField<global::OperationsResearch.MPConstraintProto> constraint_ = new pbc::RepeatedField<global::OperationsResearch.MPConstraintProto>();
    /// <summary>
    /// All the constraints appearing in the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OperationsResearch.MPConstraintProto> Constraint {
      get { return constraint_; }
    }

    /// <summary>Field number for the "general_constraint" field.</summary>
    public const int GeneralConstraintFieldNumber = 7;
    private static readonly pb::FieldCodec<global::OperationsResearch.MPGeneralConstraintProto> _repeated_generalConstraint_codec
        = pb::FieldCodec.ForMessage(58, global::OperationsResearch.MPGeneralConstraintProto.Parser);
    private readonly pbc::RepeatedField<global::OperationsResearch.MPGeneralConstraintProto> generalConstraint_ = new pbc::RepeatedField<global::OperationsResearch.MPGeneralConstraintProto>();
    /// <summary>
    /// All the general constraints appearing in the model. Note that not all
    /// solvers support all types of general constraints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OperationsResearch.MPGeneralConstraintProto> GeneralConstraint {
      get { return generalConstraint_; }
    }

    /// <summary>Field number for the "maximize" field.</summary>
    public const int MaximizeFieldNumber = 1;
    private readonly static bool MaximizeDefaultValue = false;

    private bool maximize_;
    /// <summary>
    /// True if the problem is a maximization problem. Minimize by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Maximize {
      get { if ((_hasBits0 & 1) != 0) { return maximize_; } else { return MaximizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maximize_ = value;
      }
    }
    /// <summary>Gets whether the "maximize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaximize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "maximize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaximize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "objective_offset" field.</summary>
    public const int ObjectiveOffsetFieldNumber = 2;
    private readonly static double ObjectiveOffsetDefaultValue = 0D;

    private double objectiveOffset_;
    /// <summary>
    /// Offset for the objective function. Must be finite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ObjectiveOffset {
      get { if ((_hasBits0 & 2) != 0) { return objectiveOffset_; } else { return ObjectiveOffsetDefaultValue; } }
      set {
        _hasBits0 |= 2;
        objectiveOffset_ = value;
      }
    }
    /// <summary>Gets whether the "objective_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObjectiveOffset {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "objective_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObjectiveOffset() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "quadratic_objective" field.</summary>
    public const int QuadraticObjectiveFieldNumber = 8;
    private global::OperationsResearch.MPQuadraticObjective quadraticObjective_;
    /// <summary>
    /// Optionally, a quadratic objective.
    /// As of 2019/06, only SCIP and Gurobi support quadratic objectives.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPQuadraticObjective QuadraticObjective {
      get { return quadraticObjective_; }
      set {
        quadraticObjective_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Name of the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "solution_hint" field.</summary>
    public const int SolutionHintFieldNumber = 6;
    private global::OperationsResearch.PartialVariableAssignment solutionHint_;
    /// <summary>
    /// Solution hint.
    ///
    /// If a feasible or almost-feasible solution to the problem is already known,
    /// it may be helpful to pass it to the solver so that it can be used. A solver
    /// that supports this feature will try to use this information to create its
    /// initial feasible solution.
    ///
    /// Note that it may not always be faster to give a hint like this to the
    /// solver. There is also no guarantee that the solver will use this hint or
    /// try to return a solution "close" to this assignment in case of multiple
    /// optimal solutions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.PartialVariableAssignment SolutionHint {
      get { return solutionHint_; }
      set {
        solutionHint_ = value;
      }
    }

    /// <summary>Field number for the "annotation" field.</summary>
    public const int AnnotationFieldNumber = 9;
    private static readonly pb::FieldCodec<global::OperationsResearch.MPModelProto.Types.Annotation> _repeated_annotation_codec
        = pb::FieldCodec.ForMessage(74, global::OperationsResearch.MPModelProto.Types.Annotation.Parser);
    private readonly pbc::RepeatedField<global::OperationsResearch.MPModelProto.Types.Annotation> annotation_ = new pbc::RepeatedField<global::OperationsResearch.MPModelProto.Types.Annotation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OperationsResearch.MPModelProto.Types.Annotation> Annotation {
      get { return annotation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPModelProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPModelProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variable_.Equals(other.variable_)) return false;
      if(!constraint_.Equals(other.constraint_)) return false;
      if(!generalConstraint_.Equals(other.generalConstraint_)) return false;
      if (Maximize != other.Maximize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectiveOffset, other.ObjectiveOffset)) return false;
      if (!object.Equals(QuadraticObjective, other.QuadraticObjective)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(SolutionHint, other.SolutionHint)) return false;
      if(!annotation_.Equals(other.annotation_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variable_.GetHashCode();
      hash ^= constraint_.GetHashCode();
      hash ^= generalConstraint_.GetHashCode();
      if (HasMaximize) hash ^= Maximize.GetHashCode();
      if (HasObjectiveOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectiveOffset);
      if (quadraticObjective_ != null) hash ^= QuadraticObjective.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (solutionHint_ != null) hash ^= SolutionHint.GetHashCode();
      hash ^= annotation_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMaximize) {
        output.WriteRawTag(8);
        output.WriteBool(Maximize);
      }
      if (HasObjectiveOffset) {
        output.WriteRawTag(17);
        output.WriteDouble(ObjectiveOffset);
      }
      variable_.WriteTo(output, _repeated_variable_codec);
      constraint_.WriteTo(output, _repeated_constraint_codec);
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (solutionHint_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SolutionHint);
      }
      generalConstraint_.WriteTo(output, _repeated_generalConstraint_codec);
      if (quadraticObjective_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QuadraticObjective);
      }
      annotation_.WriteTo(output, _repeated_annotation_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMaximize) {
        output.WriteRawTag(8);
        output.WriteBool(Maximize);
      }
      if (HasObjectiveOffset) {
        output.WriteRawTag(17);
        output.WriteDouble(ObjectiveOffset);
      }
      variable_.WriteTo(ref output, _repeated_variable_codec);
      constraint_.WriteTo(ref output, _repeated_constraint_codec);
      if (HasName) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (solutionHint_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SolutionHint);
      }
      generalConstraint_.WriteTo(ref output, _repeated_generalConstraint_codec);
      if (quadraticObjective_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QuadraticObjective);
      }
      annotation_.WriteTo(ref output, _repeated_annotation_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += variable_.CalculateSize(_repeated_variable_codec);
      size += constraint_.CalculateSize(_repeated_constraint_codec);
      size += generalConstraint_.CalculateSize(_repeated_generalConstraint_codec);
      if (HasMaximize) {
        size += 1 + 1;
      }
      if (HasObjectiveOffset) {
        size += 1 + 8;
      }
      if (quadraticObjective_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuadraticObjective);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (solutionHint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolutionHint);
      }
      size += annotation_.CalculateSize(_repeated_annotation_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPModelProto other) {
      if (other == null) {
        return;
      }
      variable_.Add(other.variable_);
      constraint_.Add(other.constraint_);
      generalConstraint_.Add(other.generalConstraint_);
      if (other.HasMaximize) {
        Maximize = other.Maximize;
      }
      if (other.HasObjectiveOffset) {
        ObjectiveOffset = other.ObjectiveOffset;
      }
      if (other.quadraticObjective_ != null) {
        if (quadraticObjective_ == null) {
          QuadraticObjective = new global::OperationsResearch.MPQuadraticObjective();
        }
        QuadraticObjective.MergeFrom(other.QuadraticObjective);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.solutionHint_ != null) {
        if (solutionHint_ == null) {
          SolutionHint = new global::OperationsResearch.PartialVariableAssignment();
        }
        SolutionHint.MergeFrom(other.SolutionHint);
      }
      annotation_.Add(other.annotation_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Maximize = input.ReadBool();
            break;
          }
          case 17: {
            ObjectiveOffset = input.ReadDouble();
            break;
          }
          case 26: {
            variable_.AddEntriesFrom(input, _repeated_variable_codec);
            break;
          }
          case 34: {
            constraint_.AddEntriesFrom(input, _repeated_constraint_codec);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            if (solutionHint_ == null) {
              SolutionHint = new global::OperationsResearch.PartialVariableAssignment();
            }
            input.ReadMessage(SolutionHint);
            break;
          }
          case 58: {
            generalConstraint_.AddEntriesFrom(input, _repeated_generalConstraint_codec);
            break;
          }
          case 66: {
            if (quadraticObjective_ == null) {
              QuadraticObjective = new global::OperationsResearch.MPQuadraticObjective();
            }
            input.ReadMessage(QuadraticObjective);
            break;
          }
          case 74: {
            annotation_.AddEntriesFrom(input, _repeated_annotation_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Maximize = input.ReadBool();
            break;
          }
          case 17: {
            ObjectiveOffset = input.ReadDouble();
            break;
          }
          case 26: {
            variable_.AddEntriesFrom(ref input, _repeated_variable_codec);
            break;
          }
          case 34: {
            constraint_.AddEntriesFrom(ref input, _repeated_constraint_codec);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            if (solutionHint_ == null) {
              SolutionHint = new global::OperationsResearch.PartialVariableAssignment();
            }
            input.ReadMessage(SolutionHint);
            break;
          }
          case 58: {
            generalConstraint_.AddEntriesFrom(ref input, _repeated_generalConstraint_codec);
            break;
          }
          case 66: {
            if (quadraticObjective_ == null) {
              QuadraticObjective = new global::OperationsResearch.MPQuadraticObjective();
            }
            input.ReadMessage(QuadraticObjective);
            break;
          }
          case 74: {
            annotation_.AddEntriesFrom(ref input, _repeated_annotation_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MPModelProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Annotations can be freely added by users who want to attach arbitrary
      /// payload to the model's variables or constraints.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Annotation : pb::IMessage<Annotation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OperationsResearch.MPModelProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Annotation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Annotation(Annotation other) : this() {
          _hasBits0 = other._hasBits0;
          targetType_ = other.targetType_;
          targetIndex_ = other.targetIndex_;
          targetName_ = other.targetName_;
          payloadKey_ = other.payloadKey_;
          payloadValue_ = other.payloadValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Annotation Clone() {
          return new Annotation(this);
        }

        /// <summary>Field number for the "target_type" field.</summary>
        public const int TargetTypeFieldNumber = 1;
        private readonly static global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType TargetTypeDefaultValue = global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType.VariableDefault;

        private global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType targetType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType TargetType {
          get { if ((_hasBits0 & 1) != 0) { return targetType_; } else { return TargetTypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            targetType_ = value;
          }
        }
        /// <summary>Gets whether the "target_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTargetType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "target_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTargetType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "target_index" field.</summary>
        public const int TargetIndexFieldNumber = 2;
        private readonly static int TargetIndexDefaultValue = 0;

        private int targetIndex_;
        /// <summary>
        /// If both `target_index` and `target_name` are set, they must point to the
        /// same entity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TargetIndex {
          get { if ((_hasBits0 & 2) != 0) { return targetIndex_; } else { return TargetIndexDefaultValue; } }
          set {
            _hasBits0 |= 2;
            targetIndex_ = value;
          }
        }
        /// <summary>Gets whether the "target_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTargetIndex {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "target_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTargetIndex() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "target_name" field.</summary>
        public const int TargetNameFieldNumber = 3;
        private readonly static string TargetNameDefaultValue = "";

        private string targetName_;
        /// <summary>
        /// Alternate to index. Assumes uniqueness.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string TargetName {
          get { return targetName_ ?? TargetNameDefaultValue; }
          set {
            targetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "target_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTargetName {
          get { return targetName_ != null; }
        }
        /// <summary>Clears the value of the "target_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTargetName() {
          targetName_ = null;
        }

        /// <summary>Field number for the "payload_key" field.</summary>
        public const int PayloadKeyFieldNumber = 4;
        private readonly static string PayloadKeyDefaultValue = "";

        private string payloadKey_;
        /// <summary>
        /// The payload is a (key, value) string pair. Depending on the use cases,
        /// one of the two may be omitted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PayloadKey {
          get { return payloadKey_ ?? PayloadKeyDefaultValue; }
          set {
            payloadKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "payload_key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPayloadKey {
          get { return payloadKey_ != null; }
        }
        /// <summary>Clears the value of the "payload_key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPayloadKey() {
          payloadKey_ = null;
        }

        /// <summary>Field number for the "payload_value" field.</summary>
        public const int PayloadValueFieldNumber = 5;
        private readonly static string PayloadValueDefaultValue = "";

        private string payloadValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PayloadValue {
          get { return payloadValue_ ?? PayloadValueDefaultValue; }
          set {
            payloadValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "payload_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPayloadValue {
          get { return payloadValue_ != null; }
        }
        /// <summary>Clears the value of the "payload_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPayloadValue() {
          payloadValue_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Annotation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Annotation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TargetType != other.TargetType) return false;
          if (TargetIndex != other.TargetIndex) return false;
          if (TargetName != other.TargetName) return false;
          if (PayloadKey != other.PayloadKey) return false;
          if (PayloadValue != other.PayloadValue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTargetType) hash ^= TargetType.GetHashCode();
          if (HasTargetIndex) hash ^= TargetIndex.GetHashCode();
          if (HasTargetName) hash ^= TargetName.GetHashCode();
          if (HasPayloadKey) hash ^= PayloadKey.GetHashCode();
          if (HasPayloadValue) hash ^= PayloadValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasTargetType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) TargetType);
          }
          if (HasTargetIndex) {
            output.WriteRawTag(16);
            output.WriteInt32(TargetIndex);
          }
          if (HasTargetName) {
            output.WriteRawTag(26);
            output.WriteString(TargetName);
          }
          if (HasPayloadKey) {
            output.WriteRawTag(34);
            output.WriteString(PayloadKey);
          }
          if (HasPayloadValue) {
            output.WriteRawTag(42);
            output.WriteString(PayloadValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasTargetType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) TargetType);
          }
          if (HasTargetIndex) {
            output.WriteRawTag(16);
            output.WriteInt32(TargetIndex);
          }
          if (HasTargetName) {
            output.WriteRawTag(26);
            output.WriteString(TargetName);
          }
          if (HasPayloadKey) {
            output.WriteRawTag(34);
            output.WriteString(PayloadKey);
          }
          if (HasPayloadValue) {
            output.WriteRawTag(42);
            output.WriteString(PayloadValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasTargetType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
          }
          if (HasTargetIndex) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
          }
          if (HasTargetName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetName);
          }
          if (HasPayloadKey) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadKey);
          }
          if (HasPayloadValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Annotation other) {
          if (other == null) {
            return;
          }
          if (other.HasTargetType) {
            TargetType = other.TargetType;
          }
          if (other.HasTargetIndex) {
            TargetIndex = other.TargetIndex;
          }
          if (other.HasTargetName) {
            TargetName = other.TargetName;
          }
          if (other.HasPayloadKey) {
            PayloadKey = other.PayloadKey;
          }
          if (other.HasPayloadValue) {
            PayloadValue = other.PayloadValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TargetType = (global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType) input.ReadEnum();
                break;
              }
              case 16: {
                TargetIndex = input.ReadInt32();
                break;
              }
              case 26: {
                TargetName = input.ReadString();
                break;
              }
              case 34: {
                PayloadKey = input.ReadString();
                break;
              }
              case 42: {
                PayloadValue = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                TargetType = (global::OperationsResearch.MPModelProto.Types.Annotation.Types.TargetType) input.ReadEnum();
                break;
              }
              case 16: {
                TargetIndex = input.ReadInt32();
                break;
              }
              case 26: {
                TargetName = input.ReadString();
                break;
              }
              case 34: {
                PayloadKey = input.ReadString();
                break;
              }
              case 42: {
                PayloadValue = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Annotation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// The target of an Annotation is a single entity (e.g. a variable).
          /// Several Annotations may apply to the same entity.
          /// </summary>
          public enum TargetType {
            [pbr::OriginalName("VARIABLE_DEFAULT")] VariableDefault = 0,
            [pbr::OriginalName("CONSTRAINT")] Constraint = 1,
            [pbr::OriginalName("GENERAL_CONSTRAINT")] GeneralConstraint = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// To support 'unspecified' double value in proto3, the simplest is to wrap
  /// any double value in a nested message (has_XXX works for message fields).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionalDouble : pb::IMessage<OptionalDouble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionalDouble> _parser = new pb::MessageParser<OptionalDouble>(() => new OptionalDouble());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionalDouble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionalDouble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionalDouble(OptionalDouble other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionalDouble Clone() {
      return new OptionalDouble(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static double ValueDefaultValue = 0D;

    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionalDouble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionalDouble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasValue) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasValue) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionalDouble other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MPSolverCommonParameters holds advanced usage parameters that apply to any of
  /// the solvers we support.
  /// All of the fields in this proto can have a value of unspecified. In this
  /// case each inner solver will use their own safe defaults.
  /// Some values won't be supported by some solvers. The behavior in that case is
  /// not defined yet.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPSolverCommonParameters : pb::IMessage<MPSolverCommonParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPSolverCommonParameters> _parser = new pb::MessageParser<MPSolverCommonParameters>(() => new MPSolverCommonParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPSolverCommonParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolverCommonParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolverCommonParameters(MPSolverCommonParameters other) : this() {
      _hasBits0 = other._hasBits0;
      relativeMipGap_ = other.relativeMipGap_ != null ? other.relativeMipGap_.Clone() : null;
      primalTolerance_ = other.primalTolerance_ != null ? other.primalTolerance_.Clone() : null;
      dualTolerance_ = other.dualTolerance_ != null ? other.dualTolerance_.Clone() : null;
      lpAlgorithm_ = other.lpAlgorithm_;
      presolve_ = other.presolve_;
      scaling_ = other.scaling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolverCommonParameters Clone() {
      return new MPSolverCommonParameters(this);
    }

    /// <summary>Field number for the "relative_mip_gap" field.</summary>
    public const int RelativeMipGapFieldNumber = 1;
    private global::OperationsResearch.OptionalDouble relativeMipGap_;
    /// <summary>
    /// The solver stops if the relative MIP gap reaches this value or below.
    /// The relative MIP gap is an upper bound of the relative distance to the
    /// optimum, and it is defined as:
    ///
    ///   abs(best_bound - incumbent) / abs(incumbent) [Gurobi]
    ///   abs(best_bound - incumbent) / min(abs(best_bound), abs(incumbent)) [SCIP]
    ///
    /// where "incumbent" is the objective value of the best solution found so far
    /// (i.e., lowest when minimizing, highest when maximizing), and "best_bound"
    /// is the tightest bound of the objective determined so far (i.e., highest
    /// when minimizing, and lowest when maximizing). The MIP Gap is sensitive to
    /// objective offset. If the denominator is 0 the MIP Gap is INFINITY for SCIP
    /// and Gurobi. Of note, "incumbent" and "best bound" are called "primal bound"
    /// and "dual bound" in SCIP, respectively.
    /// Ask or-core-team@ for other solvers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.OptionalDouble RelativeMipGap {
      get { return relativeMipGap_; }
      set {
        relativeMipGap_ = value;
      }
    }

    /// <summary>Field number for the "primal_tolerance" field.</summary>
    public const int PrimalToleranceFieldNumber = 2;
    private global::OperationsResearch.OptionalDouble primalTolerance_;
    /// <summary>
    /// Tolerance for primal feasibility of basic solutions: this is the maximum
    /// allowed error in constraint satisfiability.
    /// For SCIP this includes integrality constraints. For Gurobi it does not, you
    /// need to set the custom parameter IntFeasTol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.OptionalDouble PrimalTolerance {
      get { return primalTolerance_; }
      set {
        primalTolerance_ = value;
      }
    }

    /// <summary>Field number for the "dual_tolerance" field.</summary>
    public const int DualToleranceFieldNumber = 3;
    private global::OperationsResearch.OptionalDouble dualTolerance_;
    /// <summary>
    /// Tolerance for dual feasibility.
    /// For SCIP and Gurobi this is the feasibility tolerance for reduced costs in
    /// LP solution: reduced costs must all be smaller than this value in the
    /// improving direction in order for a model to be declared optimal.
    /// Not supported for other solvers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.OptionalDouble DualTolerance {
      get { return dualTolerance_; }
      set {
        dualTolerance_ = value;
      }
    }

    /// <summary>Field number for the "lp_algorithm" field.</summary>
    public const int LpAlgorithmFieldNumber = 4;
    private readonly static global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues LpAlgorithmDefaultValue = global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues.LpAlgoUnspecified;

    private global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues lpAlgorithm_;
    /// <summary>
    /// Algorithm to solve linear programs.
    /// Ask or-core-team@ if you want to know what this does exactly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues LpAlgorithm {
      get { if ((_hasBits0 & 1) != 0) { return lpAlgorithm_; } else { return LpAlgorithmDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lpAlgorithm_ = value;
      }
    }
    /// <summary>Gets whether the "lp_algorithm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLpAlgorithm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "lp_algorithm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLpAlgorithm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "presolve" field.</summary>
    public const int PresolveFieldNumber = 5;
    private readonly static global::Google.OrTools.Util.OptionalBoolean PresolveDefaultValue = global::Google.OrTools.Util.OptionalBoolean.BoolUnspecified;

    private global::Google.OrTools.Util.OptionalBoolean presolve_;
    /// <summary>
    /// Gurobi and SCIP enable presolve by default.
    /// Ask or-core-team@ for other solvers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.OrTools.Util.OptionalBoolean Presolve {
      get { if ((_hasBits0 & 2) != 0) { return presolve_; } else { return PresolveDefaultValue; } }
      set {
        _hasBits0 |= 2;
        presolve_ = value;
      }
    }
    /// <summary>Gets whether the "presolve" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPresolve {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "presolve" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPresolve() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scaling" field.</summary>
    public const int ScalingFieldNumber = 7;
    private readonly static global::Google.OrTools.Util.OptionalBoolean ScalingDefaultValue = global::Google.OrTools.Util.OptionalBoolean.BoolUnspecified;

    private global::Google.OrTools.Util.OptionalBoolean scaling_;
    /// <summary>
    /// Enable automatic scaling of matrix coefficients and objective. Available
    /// for Gurobi and GLOP.
    /// Ask or-core-team@ if you want more details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.OrTools.Util.OptionalBoolean Scaling {
      get { if ((_hasBits0 & 4) != 0) { return scaling_; } else { return ScalingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        scaling_ = value;
      }
    }
    /// <summary>Gets whether the "scaling" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaling {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scaling" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaling() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPSolverCommonParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPSolverCommonParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RelativeMipGap, other.RelativeMipGap)) return false;
      if (!object.Equals(PrimalTolerance, other.PrimalTolerance)) return false;
      if (!object.Equals(DualTolerance, other.DualTolerance)) return false;
      if (LpAlgorithm != other.LpAlgorithm) return false;
      if (Presolve != other.Presolve) return false;
      if (Scaling != other.Scaling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (relativeMipGap_ != null) hash ^= RelativeMipGap.GetHashCode();
      if (primalTolerance_ != null) hash ^= PrimalTolerance.GetHashCode();
      if (dualTolerance_ != null) hash ^= DualTolerance.GetHashCode();
      if (HasLpAlgorithm) hash ^= LpAlgorithm.GetHashCode();
      if (HasPresolve) hash ^= Presolve.GetHashCode();
      if (HasScaling) hash ^= Scaling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (relativeMipGap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RelativeMipGap);
      }
      if (primalTolerance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrimalTolerance);
      }
      if (dualTolerance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DualTolerance);
      }
      if (HasLpAlgorithm) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LpAlgorithm);
      }
      if (HasPresolve) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Presolve);
      }
      if (HasScaling) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Scaling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (relativeMipGap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RelativeMipGap);
      }
      if (primalTolerance_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrimalTolerance);
      }
      if (dualTolerance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DualTolerance);
      }
      if (HasLpAlgorithm) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LpAlgorithm);
      }
      if (HasPresolve) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Presolve);
      }
      if (HasScaling) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Scaling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (relativeMipGap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelativeMipGap);
      }
      if (primalTolerance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimalTolerance);
      }
      if (dualTolerance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DualTolerance);
      }
      if (HasLpAlgorithm) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LpAlgorithm);
      }
      if (HasPresolve) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Presolve);
      }
      if (HasScaling) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Scaling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPSolverCommonParameters other) {
      if (other == null) {
        return;
      }
      if (other.relativeMipGap_ != null) {
        if (relativeMipGap_ == null) {
          RelativeMipGap = new global::OperationsResearch.OptionalDouble();
        }
        RelativeMipGap.MergeFrom(other.RelativeMipGap);
      }
      if (other.primalTolerance_ != null) {
        if (primalTolerance_ == null) {
          PrimalTolerance = new global::OperationsResearch.OptionalDouble();
        }
        PrimalTolerance.MergeFrom(other.PrimalTolerance);
      }
      if (other.dualTolerance_ != null) {
        if (dualTolerance_ == null) {
          DualTolerance = new global::OperationsResearch.OptionalDouble();
        }
        DualTolerance.MergeFrom(other.DualTolerance);
      }
      if (other.HasLpAlgorithm) {
        LpAlgorithm = other.LpAlgorithm;
      }
      if (other.HasPresolve) {
        Presolve = other.Presolve;
      }
      if (other.HasScaling) {
        Scaling = other.Scaling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (relativeMipGap_ == null) {
              RelativeMipGap = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(RelativeMipGap);
            break;
          }
          case 18: {
            if (primalTolerance_ == null) {
              PrimalTolerance = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(PrimalTolerance);
            break;
          }
          case 26: {
            if (dualTolerance_ == null) {
              DualTolerance = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(DualTolerance);
            break;
          }
          case 32: {
            LpAlgorithm = (global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues) input.ReadEnum();
            break;
          }
          case 40: {
            Presolve = (global::Google.OrTools.Util.OptionalBoolean) input.ReadEnum();
            break;
          }
          case 56: {
            Scaling = (global::Google.OrTools.Util.OptionalBoolean) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (relativeMipGap_ == null) {
              RelativeMipGap = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(RelativeMipGap);
            break;
          }
          case 18: {
            if (primalTolerance_ == null) {
              PrimalTolerance = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(PrimalTolerance);
            break;
          }
          case 26: {
            if (dualTolerance_ == null) {
              DualTolerance = new global::OperationsResearch.OptionalDouble();
            }
            input.ReadMessage(DualTolerance);
            break;
          }
          case 32: {
            LpAlgorithm = (global::OperationsResearch.MPSolverCommonParameters.Types.LPAlgorithmValues) input.ReadEnum();
            break;
          }
          case 40: {
            Presolve = (global::Google.OrTools.Util.OptionalBoolean) input.ReadEnum();
            break;
          }
          case 56: {
            Scaling = (global::Google.OrTools.Util.OptionalBoolean) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MPSolverCommonParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum LPAlgorithmValues {
        [pbr::OriginalName("LP_ALGO_UNSPECIFIED")] LpAlgoUnspecified = 0,
        /// <summary>
        /// Dual simplex.
        /// </summary>
        [pbr::OriginalName("LP_ALGO_DUAL")] LpAlgoDual = 1,
        /// <summary>
        /// Primal simplex.
        /// </summary>
        [pbr::OriginalName("LP_ALGO_PRIMAL")] LpAlgoPrimal = 2,
        /// <summary>
        /// Barrier algorithm.
        /// </summary>
        [pbr::OriginalName("LP_ALGO_BARRIER")] LpAlgoBarrier = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Encodes a full MPModelProto by way of referencing to a "baseline"
  /// MPModelProto stored in a file, and a "delta" to apply to this model.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPModelDeltaProto : pb::IMessage<MPModelDeltaProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPModelDeltaProto> _parser = new pb::MessageParser<MPModelDeltaProto>(() => new MPModelDeltaProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPModelDeltaProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelDeltaProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelDeltaProto(MPModelDeltaProto other) : this() {
      baselineModelFilePath_ = other.baselineModelFilePath_;
      variableOverrides_ = other.variableOverrides_.Clone();
      constraintOverrides_ = other.constraintOverrides_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelDeltaProto Clone() {
      return new MPModelDeltaProto(this);
    }

    /// <summary>Field number for the "baseline_model_file_path" field.</summary>
    public const int BaselineModelFilePathFieldNumber = 1;
    private readonly static string BaselineModelFilePathDefaultValue = "";

    private string baselineModelFilePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BaselineModelFilePath {
      get { return baselineModelFilePath_ ?? BaselineModelFilePathDefaultValue; }
      set {
        baselineModelFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "baseline_model_file_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBaselineModelFilePath {
      get { return baselineModelFilePath_ != null; }
    }
    /// <summary>Clears the value of the "baseline_model_file_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBaselineModelFilePath() {
      baselineModelFilePath_ = null;
    }

    /// <summary>Field number for the "variable_overrides" field.</summary>
    public const int VariableOverridesFieldNumber = 2;
    private static readonly pbc::MapField<int, global::OperationsResearch.MPVariableProto>.Codec _map_variableOverrides_codec
        = new pbc::MapField<int, global::OperationsResearch.MPVariableProto>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::OperationsResearch.MPVariableProto.Parser), 18);
    private readonly pbc::MapField<int, global::OperationsResearch.MPVariableProto> variableOverrides_ = new pbc::MapField<int, global::OperationsResearch.MPVariableProto>();
    /// <summary>
    /// The variable protos listed here will override (via MergeFrom()) the ones
    /// in the baseline model: you only need to specify the fields that change.
    /// To add a new variable, add it with a new variable index (variable indices
    /// still need to span a dense integer interval).
    /// You can't "delete" a variable but you can "neutralize" it by fixing its
    /// value, setting its objective coefficient to zero, and by nullifying all
    /// the terms involving it in the constraints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::OperationsResearch.MPVariableProto> VariableOverrides {
      get { return variableOverrides_; }
    }

    /// <summary>Field number for the "constraint_overrides" field.</summary>
    public const int ConstraintOverridesFieldNumber = 3;
    private static readonly pbc::MapField<int, global::OperationsResearch.MPConstraintProto>.Codec _map_constraintOverrides_codec
        = new pbc::MapField<int, global::OperationsResearch.MPConstraintProto>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::OperationsResearch.MPConstraintProto.Parser), 26);
    private readonly pbc::MapField<int, global::OperationsResearch.MPConstraintProto> constraintOverrides_ = new pbc::MapField<int, global::OperationsResearch.MPConstraintProto>();
    /// <summary>
    /// Constraints can be changed (or added) in the same way as variables, see
    /// above. It's mostly like applying MergeFrom(), except that:
    /// - the "var_index" and "coefficient" fields will be overridden like a map:
    ///   if a key pre-exists, we overwrite its value, otherwise we add it.
    /// - if you set the lower bound to -inf and the upper bound to +inf, thus
    ///   effectively neutralizing the constraint, the solver will implicitly
    ///   remove all of the constraint's terms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::OperationsResearch.MPConstraintProto> ConstraintOverrides {
      get { return constraintOverrides_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPModelDeltaProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPModelDeltaProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaselineModelFilePath != other.BaselineModelFilePath) return false;
      if (!VariableOverrides.Equals(other.VariableOverrides)) return false;
      if (!ConstraintOverrides.Equals(other.ConstraintOverrides)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBaselineModelFilePath) hash ^= BaselineModelFilePath.GetHashCode();
      hash ^= VariableOverrides.GetHashCode();
      hash ^= ConstraintOverrides.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBaselineModelFilePath) {
        output.WriteRawTag(10);
        output.WriteString(BaselineModelFilePath);
      }
      variableOverrides_.WriteTo(output, _map_variableOverrides_codec);
      constraintOverrides_.WriteTo(output, _map_constraintOverrides_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBaselineModelFilePath) {
        output.WriteRawTag(10);
        output.WriteString(BaselineModelFilePath);
      }
      variableOverrides_.WriteTo(ref output, _map_variableOverrides_codec);
      constraintOverrides_.WriteTo(ref output, _map_constraintOverrides_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasBaselineModelFilePath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaselineModelFilePath);
      }
      size += variableOverrides_.CalculateSize(_map_variableOverrides_codec);
      size += constraintOverrides_.CalculateSize(_map_constraintOverrides_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPModelDeltaProto other) {
      if (other == null) {
        return;
      }
      if (other.HasBaselineModelFilePath) {
        BaselineModelFilePath = other.BaselineModelFilePath;
      }
      variableOverrides_.MergeFrom(other.variableOverrides_);
      constraintOverrides_.MergeFrom(other.constraintOverrides_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaselineModelFilePath = input.ReadString();
            break;
          }
          case 18: {
            variableOverrides_.AddEntriesFrom(input, _map_variableOverrides_codec);
            break;
          }
          case 26: {
            constraintOverrides_.AddEntriesFrom(input, _map_constraintOverrides_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BaselineModelFilePath = input.ReadString();
            break;
          }
          case 18: {
            variableOverrides_.AddEntriesFrom(ref input, _map_variableOverrides_codec);
            break;
          }
          case 26: {
            constraintOverrides_.AddEntriesFrom(ref input, _map_constraintOverrides_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Next id: 18.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPModelRequest : pb::IMessage<MPModelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPModelRequest> _parser = new pb::MessageParser<MPModelRequest>(() => new MPModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelRequest(MPModelRequest other) : this() {
      _hasBits0 = other._hasBits0;
      model_ = other.model_ != null ? other.model_.Clone() : null;
      solverType_ = other.solverType_;
      solverTimeLimitSeconds_ = other.solverTimeLimitSeconds_;
      enableInternalSolverOutput_ = other.enableInternalSolverOutput_;
      solverSpecificParameters_ = other.solverSpecificParameters_;
      ignoreSolverSpecificParametersFailure_ = other.ignoreSolverSpecificParametersFailure_;
      modelDelta_ = other.modelDelta_ != null ? other.modelDelta_.Clone() : null;
      populateAdditionalSolutionsUpTo_ = other.populateAdditionalSolutionsUpTo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPModelRequest Clone() {
      return new MPModelRequest(this);
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 1;
    private global::OperationsResearch.MPModelProto model_;
    /// <summary>
    /// The model to be optimized by the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPModelProto Model {
      get { return model_; }
      set {
        model_ = value;
      }
    }

    /// <summary>Field number for the "solver_type" field.</summary>
    public const int SolverTypeFieldNumber = 2;
    private readonly static global::OperationsResearch.MPModelRequest.Types.SolverType SolverTypeDefaultValue = global::OperationsResearch.MPModelRequest.Types.SolverType.GlopLinearProgramming;

    private global::OperationsResearch.MPModelRequest.Types.SolverType solverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPModelRequest.Types.SolverType SolverType {
      get { if ((_hasBits0 & 1) != 0) { return solverType_; } else { return SolverTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        solverType_ = value;
      }
    }
    /// <summary>Gets whether the "solver_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolverType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "solver_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolverType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "solver_time_limit_seconds" field.</summary>
    public const int SolverTimeLimitSecondsFieldNumber = 3;
    private readonly static double SolverTimeLimitSecondsDefaultValue = 0D;

    private double solverTimeLimitSeconds_;
    /// <summary>
    /// Maximum time to be spent by the solver to solve 'model'. If the server is
    /// busy and the RPC's deadline_left is less than this, it will immediately
    /// give up and return an error, without even trying to solve.
    ///
    /// The client can use this to have a guarantee on how much time the
    /// solver will spend on the problem (unless it finds and proves
    /// an optimal solution more quickly).
    ///
    /// If not specified, the time limit on the solver is the RPC's deadline_left.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SolverTimeLimitSeconds {
      get { if ((_hasBits0 & 2) != 0) { return solverTimeLimitSeconds_; } else { return SolverTimeLimitSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        solverTimeLimitSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "solver_time_limit_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolverTimeLimitSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "solver_time_limit_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolverTimeLimitSeconds() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "enable_internal_solver_output" field.</summary>
    public const int EnableInternalSolverOutputFieldNumber = 4;
    private readonly static bool EnableInternalSolverOutputDefaultValue = false;

    private bool enableInternalSolverOutput_;
    /// <summary>
    /// If this is set, then EnableOutput() will be set on the internal MPSolver
    /// that solves the model.
    /// WARNING: if you set this on a request to prod servers, it will be rejected
    /// and yield the RPC Application Error code MPSOLVER_SOLVER_TYPE_UNAVAILABLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableInternalSolverOutput {
      get { if ((_hasBits0 & 4) != 0) { return enableInternalSolverOutput_; } else { return EnableInternalSolverOutputDefaultValue; } }
      set {
        _hasBits0 |= 4;
        enableInternalSolverOutput_ = value;
      }
    }
    /// <summary>Gets whether the "enable_internal_solver_output" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableInternalSolverOutput {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "enable_internal_solver_output" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableInternalSolverOutput() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "solver_specific_parameters" field.</summary>
    public const int SolverSpecificParametersFieldNumber = 5;
    private readonly static string SolverSpecificParametersDefaultValue = "";

    private string solverSpecificParameters_;
    /// <summary>
    /// Advanced usage. Solver-specific parameters in the solver's own format,
    /// different for each solver. For example, if you use SCIP and you want to
    /// stop the solve earlier than the time limit if it reached a solution that is
    /// at most 1% away from the optimal, you can set this to "limits/gap=0.01".
    ///
    /// Note however that there is no "security" mechanism in place so it is up to
    /// the client to make sure that the given options don't make the solve
    /// non thread safe or use up too much memory for instance.
    ///
    /// If the option format is not understood by the solver, the request will be
    /// rejected and yield an RPC Application error with code
    /// MPSOLVER_MODEL_INVALID_SOLVER_PARAMETERS, unless you have set
    /// ignore_solver_specific_parameters_failure=true (in which case they are
    /// simply ignored).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SolverSpecificParameters {
      get { return solverSpecificParameters_ ?? SolverSpecificParametersDefaultValue; }
      set {
        solverSpecificParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "solver_specific_parameters" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolverSpecificParameters {
      get { return solverSpecificParameters_ != null; }
    }
    /// <summary>Clears the value of the "solver_specific_parameters" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolverSpecificParameters() {
      solverSpecificParameters_ = null;
    }

    /// <summary>Field number for the "ignore_solver_specific_parameters_failure" field.</summary>
    public const int IgnoreSolverSpecificParametersFailureFieldNumber = 9;
    private readonly static bool IgnoreSolverSpecificParametersFailureDefaultValue = false;

    private bool ignoreSolverSpecificParametersFailure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreSolverSpecificParametersFailure {
      get { if ((_hasBits0 & 8) != 0) { return ignoreSolverSpecificParametersFailure_; } else { return IgnoreSolverSpecificParametersFailureDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ignoreSolverSpecificParametersFailure_ = value;
      }
    }
    /// <summary>Gets whether the "ignore_solver_specific_parameters_failure" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreSolverSpecificParametersFailure {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ignore_solver_specific_parameters_failure" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreSolverSpecificParametersFailure() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "model_delta" field.</summary>
    public const int ModelDeltaFieldNumber = 8;
    private global::OperationsResearch.MPModelDeltaProto modelDelta_;
    /// <summary>
    /// Advanced usage: model "delta". If used, "model" must be unset. See the
    /// definition of MPModelDeltaProto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPModelDeltaProto ModelDelta {
      get { return modelDelta_; }
      set {
        modelDelta_ = value;
      }
    }

    /// <summary>Field number for the "populate_additional_solutions_up_to" field.</summary>
    public const int PopulateAdditionalSolutionsUpToFieldNumber = 11;
    private readonly static int PopulateAdditionalSolutionsUpToDefaultValue = 0;

    private int populateAdditionalSolutionsUpTo_;
    /// <summary>
    /// Controls the recovery of additional solutions, if any, saved by the
    /// underlying solver back in the MPSolutionResponse.additional_solutions.
    /// The repeated field will be length
    ///    min(populate_addition_solutions_up_to,
    ///        #additional_solutions_available_in_underlying_solver)
    /// These additional solutions may have a worse objective than the main
    /// solution returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PopulateAdditionalSolutionsUpTo {
      get { if ((_hasBits0 & 16) != 0) { return populateAdditionalSolutionsUpTo_; } else { return PopulateAdditionalSolutionsUpToDefaultValue; } }
      set {
        _hasBits0 |= 16;
        populateAdditionalSolutionsUpTo_ = value;
      }
    }
    /// <summary>Gets whether the "populate_additional_solutions_up_to" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPopulateAdditionalSolutionsUpTo {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "populate_additional_solutions_up_to" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPopulateAdditionalSolutionsUpTo() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Model, other.Model)) return false;
      if (SolverType != other.SolverType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SolverTimeLimitSeconds, other.SolverTimeLimitSeconds)) return false;
      if (EnableInternalSolverOutput != other.EnableInternalSolverOutput) return false;
      if (SolverSpecificParameters != other.SolverSpecificParameters) return false;
      if (IgnoreSolverSpecificParametersFailure != other.IgnoreSolverSpecificParametersFailure) return false;
      if (!object.Equals(ModelDelta, other.ModelDelta)) return false;
      if (PopulateAdditionalSolutionsUpTo != other.PopulateAdditionalSolutionsUpTo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (model_ != null) hash ^= Model.GetHashCode();
      if (HasSolverType) hash ^= SolverType.GetHashCode();
      if (HasSolverTimeLimitSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SolverTimeLimitSeconds);
      if (HasEnableInternalSolverOutput) hash ^= EnableInternalSolverOutput.GetHashCode();
      if (HasSolverSpecificParameters) hash ^= SolverSpecificParameters.GetHashCode();
      if (HasIgnoreSolverSpecificParametersFailure) hash ^= IgnoreSolverSpecificParametersFailure.GetHashCode();
      if (modelDelta_ != null) hash ^= ModelDelta.GetHashCode();
      if (HasPopulateAdditionalSolutionsUpTo) hash ^= PopulateAdditionalSolutionsUpTo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (model_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Model);
      }
      if (HasSolverType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SolverType);
      }
      if (HasSolverTimeLimitSeconds) {
        output.WriteRawTag(25);
        output.WriteDouble(SolverTimeLimitSeconds);
      }
      if (HasEnableInternalSolverOutput) {
        output.WriteRawTag(32);
        output.WriteBool(EnableInternalSolverOutput);
      }
      if (HasSolverSpecificParameters) {
        output.WriteRawTag(42);
        output.WriteString(SolverSpecificParameters);
      }
      if (modelDelta_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ModelDelta);
      }
      if (HasIgnoreSolverSpecificParametersFailure) {
        output.WriteRawTag(72);
        output.WriteBool(IgnoreSolverSpecificParametersFailure);
      }
      if (HasPopulateAdditionalSolutionsUpTo) {
        output.WriteRawTag(88);
        output.WriteInt32(PopulateAdditionalSolutionsUpTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (model_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Model);
      }
      if (HasSolverType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SolverType);
      }
      if (HasSolverTimeLimitSeconds) {
        output.WriteRawTag(25);
        output.WriteDouble(SolverTimeLimitSeconds);
      }
      if (HasEnableInternalSolverOutput) {
        output.WriteRawTag(32);
        output.WriteBool(EnableInternalSolverOutput);
      }
      if (HasSolverSpecificParameters) {
        output.WriteRawTag(42);
        output.WriteString(SolverSpecificParameters);
      }
      if (modelDelta_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ModelDelta);
      }
      if (HasIgnoreSolverSpecificParametersFailure) {
        output.WriteRawTag(72);
        output.WriteBool(IgnoreSolverSpecificParametersFailure);
      }
      if (HasPopulateAdditionalSolutionsUpTo) {
        output.WriteRawTag(88);
        output.WriteInt32(PopulateAdditionalSolutionsUpTo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (model_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Model);
      }
      if (HasSolverType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolverType);
      }
      if (HasSolverTimeLimitSeconds) {
        size += 1 + 8;
      }
      if (HasEnableInternalSolverOutput) {
        size += 1 + 1;
      }
      if (HasSolverSpecificParameters) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SolverSpecificParameters);
      }
      if (HasIgnoreSolverSpecificParametersFailure) {
        size += 1 + 1;
      }
      if (modelDelta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelDelta);
      }
      if (HasPopulateAdditionalSolutionsUpTo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PopulateAdditionalSolutionsUpTo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.model_ != null) {
        if (model_ == null) {
          Model = new global::OperationsResearch.MPModelProto();
        }
        Model.MergeFrom(other.Model);
      }
      if (other.HasSolverType) {
        SolverType = other.SolverType;
      }
      if (other.HasSolverTimeLimitSeconds) {
        SolverTimeLimitSeconds = other.SolverTimeLimitSeconds;
      }
      if (other.HasEnableInternalSolverOutput) {
        EnableInternalSolverOutput = other.EnableInternalSolverOutput;
      }
      if (other.HasSolverSpecificParameters) {
        SolverSpecificParameters = other.SolverSpecificParameters;
      }
      if (other.HasIgnoreSolverSpecificParametersFailure) {
        IgnoreSolverSpecificParametersFailure = other.IgnoreSolverSpecificParametersFailure;
      }
      if (other.modelDelta_ != null) {
        if (modelDelta_ == null) {
          ModelDelta = new global::OperationsResearch.MPModelDeltaProto();
        }
        ModelDelta.MergeFrom(other.ModelDelta);
      }
      if (other.HasPopulateAdditionalSolutionsUpTo) {
        PopulateAdditionalSolutionsUpTo = other.PopulateAdditionalSolutionsUpTo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (model_ == null) {
              Model = new global::OperationsResearch.MPModelProto();
            }
            input.ReadMessage(Model);
            break;
          }
          case 16: {
            SolverType = (global::OperationsResearch.MPModelRequest.Types.SolverType) input.ReadEnum();
            break;
          }
          case 25: {
            SolverTimeLimitSeconds = input.ReadDouble();
            break;
          }
          case 32: {
            EnableInternalSolverOutput = input.ReadBool();
            break;
          }
          case 42: {
            SolverSpecificParameters = input.ReadString();
            break;
          }
          case 66: {
            if (modelDelta_ == null) {
              ModelDelta = new global::OperationsResearch.MPModelDeltaProto();
            }
            input.ReadMessage(ModelDelta);
            break;
          }
          case 72: {
            IgnoreSolverSpecificParametersFailure = input.ReadBool();
            break;
          }
          case 88: {
            PopulateAdditionalSolutionsUpTo = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (model_ == null) {
              Model = new global::OperationsResearch.MPModelProto();
            }
            input.ReadMessage(Model);
            break;
          }
          case 16: {
            SolverType = (global::OperationsResearch.MPModelRequest.Types.SolverType) input.ReadEnum();
            break;
          }
          case 25: {
            SolverTimeLimitSeconds = input.ReadDouble();
            break;
          }
          case 32: {
            EnableInternalSolverOutput = input.ReadBool();
            break;
          }
          case 42: {
            SolverSpecificParameters = input.ReadString();
            break;
          }
          case 66: {
            if (modelDelta_ == null) {
              ModelDelta = new global::OperationsResearch.MPModelDeltaProto();
            }
            input.ReadMessage(ModelDelta);
            break;
          }
          case 72: {
            IgnoreSolverSpecificParametersFailure = input.ReadBool();
            break;
          }
          case 88: {
            PopulateAdditionalSolutionsUpTo = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MPModelRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The solver type, which will select a specific implementation, and will also
      /// impact the interpretation of the model (i.e. are we solving the problem
      /// as a mixed integer program or are we relaxing it as a continuous linear
      /// program?).
      /// This must remain consistent with MPSolver::OptimizationProblemType.
      /// </summary>
      public enum SolverType {
        [pbr::OriginalName("CLP_LINEAR_PROGRAMMING")] ClpLinearProgramming = 0,
        /// <summary>
        /// Recommended default for LP models.
        /// </summary>
        [pbr::OriginalName("GLOP_LINEAR_PROGRAMMING")] GlopLinearProgramming = 2,
        [pbr::OriginalName("GLPK_LINEAR_PROGRAMMING")] GlpkLinearProgramming = 1,
        /// <summary>
        /// Commercial, needs a valid license.
        /// </summary>
        [pbr::OriginalName("GUROBI_LINEAR_PROGRAMMING")] GurobiLinearProgramming = 6,
        /// <summary>
        /// Commercial, needs a valid license. NOLINT
        /// </summary>
        [pbr::OriginalName("XPRESS_LINEAR_PROGRAMMING")] XpressLinearProgramming = 101,
        /// <summary>
        /// Commercial, needs a valid license. NOLINT
        /// </summary>
        [pbr::OriginalName("CPLEX_LINEAR_PROGRAMMING")] CplexLinearProgramming = 10,
        [pbr::OriginalName("HIGHS_LINEAR_PROGRAMMING")] HighsLinearProgramming = 15,
        /// <summary>
        /// Recommended default for MIP models.
        /// </summary>
        [pbr::OriginalName("SCIP_MIXED_INTEGER_PROGRAMMING")] ScipMixedIntegerProgramming = 3,
        [pbr::OriginalName("GLPK_MIXED_INTEGER_PROGRAMMING")] GlpkMixedIntegerProgramming = 4,
        [pbr::OriginalName("CBC_MIXED_INTEGER_PROGRAMMING")] CbcMixedIntegerProgramming = 5,
        /// <summary>
        /// Commercial, needs a valid license.
        /// </summary>
        [pbr::OriginalName("GUROBI_MIXED_INTEGER_PROGRAMMING")] GurobiMixedIntegerProgramming = 7,
        /// <summary>
        /// Commercial, needs a valid license. NOLINT
        /// </summary>
        [pbr::OriginalName("XPRESS_MIXED_INTEGER_PROGRAMMING")] XpressMixedIntegerProgramming = 102,
        /// <summary>
        /// Commercial, needs a valid license. NOLINT
        /// </summary>
        [pbr::OriginalName("CPLEX_MIXED_INTEGER_PROGRAMMING")] CplexMixedIntegerProgramming = 11,
        [pbr::OriginalName("HIGHS_MIXED_INTEGER_PROGRAMMING")] HighsMixedIntegerProgramming = 16,
        [pbr::OriginalName("BOP_INTEGER_PROGRAMMING")] BopIntegerProgramming = 12,
        /// <summary>
        /// WARNING: This solver will currently interpret all variables as integer,
        /// so any solution you get will be valid, but the optimal might be far away
        /// for the real one (when you authorise non-integer value for continuous
        /// variables).
        /// </summary>
        [pbr::OriginalName("SAT_INTEGER_PROGRAMMING")] SatIntegerProgramming = 14,
        /// <summary>
        /// In-house linear programming solver based on the primal-dual hybrid
        /// gradient method. Sometimes faster than Glop for medium-size problems and
        /// scales to much larger problems than Glop.
        /// </summary>
        [pbr::OriginalName("PDLP_LINEAR_PROGRAMMING")] PdlpLinearProgramming = 8,
        [pbr::OriginalName("KNAPSACK_MIXED_INTEGER_PROGRAMMING")] KnapsackMixedIntegerProgramming = 13,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPSolution : pb::IMessage<MPSolution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPSolution> _parser = new pb::MessageParser<MPSolution>(() => new MPSolution());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPSolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolution(MPSolution other) : this() {
      _hasBits0 = other._hasBits0;
      objectiveValue_ = other.objectiveValue_;
      variableValue_ = other.variableValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolution Clone() {
      return new MPSolution(this);
    }

    /// <summary>Field number for the "objective_value" field.</summary>
    public const int ObjectiveValueFieldNumber = 1;
    private readonly static double ObjectiveValueDefaultValue = 0D;

    private double objectiveValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ObjectiveValue {
      get { if ((_hasBits0 & 1) != 0) { return objectiveValue_; } else { return ObjectiveValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        objectiveValue_ = value;
      }
    }
    /// <summary>Gets whether the "objective_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObjectiveValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "objective_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObjectiveValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "variable_value" field.</summary>
    public const int VariableValueFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_variableValue_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> variableValue_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VariableValue {
      get { return variableValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPSolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPSolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectiveValue, other.ObjectiveValue)) return false;
      if(!variableValue_.Equals(other.variableValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasObjectiveValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectiveValue);
      hash ^= variableValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasObjectiveValue) {
        output.WriteRawTag(9);
        output.WriteDouble(ObjectiveValue);
      }
      variableValue_.WriteTo(output, _repeated_variableValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasObjectiveValue) {
        output.WriteRawTag(9);
        output.WriteDouble(ObjectiveValue);
      }
      variableValue_.WriteTo(ref output, _repeated_variableValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasObjectiveValue) {
        size += 1 + 8;
      }
      size += variableValue_.CalculateSize(_repeated_variableValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPSolution other) {
      if (other == null) {
        return;
      }
      if (other.HasObjectiveValue) {
        ObjectiveValue = other.ObjectiveValue;
      }
      variableValue_.Add(other.variableValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            ObjectiveValue = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            variableValue_.AddEntriesFrom(input, _repeated_variableValue_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            ObjectiveValue = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            variableValue_.AddEntriesFrom(ref input, _repeated_variableValue_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPSolveInfo : pb::IMessage<MPSolveInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPSolveInfo> _parser = new pb::MessageParser<MPSolveInfo>(() => new MPSolveInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPSolveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolveInfo(MPSolveInfo other) : this() {
      _hasBits0 = other._hasBits0;
      solveWallTimeSeconds_ = other.solveWallTimeSeconds_;
      solveUserTimeSeconds_ = other.solveUserTimeSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolveInfo Clone() {
      return new MPSolveInfo(this);
    }

    /// <summary>Field number for the "solve_wall_time_seconds" field.</summary>
    public const int SolveWallTimeSecondsFieldNumber = 1;
    private readonly static double SolveWallTimeSecondsDefaultValue = 0D;

    private double solveWallTimeSeconds_;
    /// <summary>
    /// How much wall time (resp. user time) elapsed during the Solve() of the
    /// underlying solver library. "wall" time and "user" time are to be
    /// interpreted like for the "time" command in bash (see "help time").
    /// In particular, "user time" is CPU time and can be greater than wall time
    /// when using several threads.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SolveWallTimeSeconds {
      get { if ((_hasBits0 & 1) != 0) { return solveWallTimeSeconds_; } else { return SolveWallTimeSecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        solveWallTimeSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "solve_wall_time_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolveWallTimeSeconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "solve_wall_time_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolveWallTimeSeconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "solve_user_time_seconds" field.</summary>
    public const int SolveUserTimeSecondsFieldNumber = 2;
    private readonly static double SolveUserTimeSecondsDefaultValue = 0D;

    private double solveUserTimeSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SolveUserTimeSeconds {
      get { if ((_hasBits0 & 2) != 0) { return solveUserTimeSeconds_; } else { return SolveUserTimeSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        solveUserTimeSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "solve_user_time_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolveUserTimeSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "solve_user_time_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolveUserTimeSeconds() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPSolveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPSolveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SolveWallTimeSeconds, other.SolveWallTimeSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SolveUserTimeSeconds, other.SolveUserTimeSeconds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSolveWallTimeSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SolveWallTimeSeconds);
      if (HasSolveUserTimeSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SolveUserTimeSeconds);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSolveWallTimeSeconds) {
        output.WriteRawTag(9);
        output.WriteDouble(SolveWallTimeSeconds);
      }
      if (HasSolveUserTimeSeconds) {
        output.WriteRawTag(17);
        output.WriteDouble(SolveUserTimeSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSolveWallTimeSeconds) {
        output.WriteRawTag(9);
        output.WriteDouble(SolveWallTimeSeconds);
      }
      if (HasSolveUserTimeSeconds) {
        output.WriteRawTag(17);
        output.WriteDouble(SolveUserTimeSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSolveWallTimeSeconds) {
        size += 1 + 8;
      }
      if (HasSolveUserTimeSeconds) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPSolveInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSolveWallTimeSeconds) {
        SolveWallTimeSeconds = other.SolveWallTimeSeconds;
      }
      if (other.HasSolveUserTimeSeconds) {
        SolveUserTimeSeconds = other.SolveUserTimeSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            SolveWallTimeSeconds = input.ReadDouble();
            break;
          }
          case 17: {
            SolveUserTimeSeconds = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            SolveWallTimeSeconds = input.ReadDouble();
            break;
          }
          case 17: {
            SolveUserTimeSeconds = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Next id: 12.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MPSolutionResponse : pb::IMessage<MPSolutionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPSolutionResponse> _parser = new pb::MessageParser<MPSolutionResponse>(() => new MPSolutionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MPSolutionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OperationsResearch.LinearSolverReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolutionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolutionResponse(MPSolutionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      status_ = other.status_;
      statusStr_ = other.statusStr_;
      objectiveValue_ = other.objectiveValue_;
      bestObjectiveBound_ = other.bestObjectiveBound_;
      variableValue_ = other.variableValue_.Clone();
      solveInfo_ = other.solveInfo_ != null ? other.solveInfo_.Clone() : null;
      solverSpecificInfo_ = other.solverSpecificInfo_;
      dualValue_ = other.dualValue_.Clone();
      reducedCost_ = other.reducedCost_.Clone();
      additionalSolutions_ = other.additionalSolutions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MPSolutionResponse Clone() {
      return new MPSolutionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private readonly static global::OperationsResearch.MPSolverResponseStatus StatusDefaultValue = global::OperationsResearch.MPSolverResponseStatus.MpsolverUnknownStatus;

    private global::OperationsResearch.MPSolverResponseStatus status_;
    /// <summary>
    /// Result of the optimization.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPSolverResponseStatus Status {
      get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        status_ = value;
      }
    }
    /// <summary>Gets whether the "status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status_str" field.</summary>
    public const int StatusStrFieldNumber = 7;
    private readonly static string StatusStrDefaultValue = "";

    private string statusStr_;
    /// <summary>
    /// Human-readable string giving more details about the status. For example,
    /// when the status is MPSOLVER_INVALID_MODE, this can hold a description of
    /// why the model is invalid.
    /// This isn't always filled: don't depend on its value or even its presence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StatusStr {
      get { return statusStr_ ?? StatusStrDefaultValue; }
      set {
        statusStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "status_str" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStatusStr {
      get { return statusStr_ != null; }
    }
    /// <summary>Clears the value of the "status_str" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatusStr() {
      statusStr_ = null;
    }

    /// <summary>Field number for the "objective_value" field.</summary>
    public const int ObjectiveValueFieldNumber = 2;
    private readonly static double ObjectiveValueDefaultValue = 0D;

    private double objectiveValue_;
    /// <summary>
    /// Objective value corresponding to the "variable_value" below, taking into
    /// account the source "objective_offset" and "objective_coefficient".
    /// This is set iff 'status' is OPTIMAL or FEASIBLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ObjectiveValue {
      get { if ((_hasBits0 & 2) != 0) { return objectiveValue_; } else { return ObjectiveValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        objectiveValue_ = value;
      }
    }
    /// <summary>Gets whether the "objective_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasObjectiveValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "objective_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearObjectiveValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "best_objective_bound" field.</summary>
    public const int BestObjectiveBoundFieldNumber = 5;
    private readonly static double BestObjectiveBoundDefaultValue = 0D;

    private double bestObjectiveBound_;
    /// <summary>
    /// This field is only filled for MIP problems. For a minimization problem,
    /// this is a lower bound on the optimal objective value. For a maximization
    /// problem, it is an upper bound. It is only filled if the status is OPTIMAL
    /// or FEASIBLE. In the former case, best_objective_bound should be equal to
    /// objective_value (modulo numerical errors).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BestObjectiveBound {
      get { if ((_hasBits0 & 4) != 0) { return bestObjectiveBound_; } else { return BestObjectiveBoundDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bestObjectiveBound_ = value;
      }
    }
    /// <summary>Gets whether the "best_objective_bound" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBestObjectiveBound {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "best_objective_bound" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBestObjectiveBound() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "variable_value" field.</summary>
    public const int VariableValueFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_variableValue_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> variableValue_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Variable values in the same order as the MPModelProto::variable field.
    /// This is a dense representation. These are set iff 'status' is OPTIMAL or
    /// FEASIBLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> VariableValue {
      get { return variableValue_; }
    }

    /// <summary>Field number for the "solve_info" field.</summary>
    public const int SolveInfoFieldNumber = 10;
    private global::OperationsResearch.MPSolveInfo solveInfo_;
    /// <summary>
    /// Contains extra information about the solve, populated if the underlying
    /// solver (and its interface) supports it. As of 2021/07/19 this is supported
    /// by SCIP and Gurobi proto solves.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OperationsResearch.MPSolveInfo SolveInfo {
      get { return solveInfo_; }
      set {
        solveInfo_ = value;
      }
    }

    /// <summary>Field number for the "solver_specific_info" field.</summary>
    public const int SolverSpecificInfoFieldNumber = 11;
    private readonly static pb::ByteString SolverSpecificInfoDefaultValue = pb::ByteString.Empty;

    private pb::ByteString solverSpecificInfo_;
    /// <summary>
    /// Opaque solver-specific information.
    /// For the PDLP solver, this is a serialized pdlp::SolveLog proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SolverSpecificInfo {
      get { return solverSpecificInfo_ ?? SolverSpecificInfoDefaultValue; }
      set {
        solverSpecificInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "solver_specific_info" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSolverSpecificInfo {
      get { return solverSpecificInfo_ != null; }
    }
    /// <summary>Clears the value of the "solver_specific_info" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSolverSpecificInfo() {
      solverSpecificInfo_ = null;
    }

    /// <summary>Field number for the "dual_value" field.</summary>
    public const int DualValueFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_dualValue_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> dualValue_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// [Advanced usage.]
    /// Values of the dual variables values in the same order as the
    /// MPModelProto::constraint field. This is a dense representation.
    /// These are not set if the problem was solved with a MIP solver (even if
    /// it is actually a linear program).
    /// These are set iff 'status' is OPTIMAL or FEASIBLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> DualValue {
      get { return dualValue_; }
    }

    /// <summary>Field number for the "reduced_cost" field.</summary>
    public const int ReducedCostFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_reducedCost_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> reducedCost_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// [Advanced usage.]
    /// Values of the reduced cost of the variables in the same order as the
    /// MPModelProto::variable. This is a dense representation.
    /// These are not set if the problem was solved with a MIP solver (even if it
    /// is actually a linear program).
    /// These are set iff 'status' is OPTIMAL or FEASIBLE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> ReducedCost {
      get { return reducedCost_; }
    }

    /// <summary>Field number for the "additional_solutions" field.</summary>
    public const int AdditionalSolutionsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::OperationsResearch.MPSolution> _repeated_additionalSolutions_codec
        = pb::FieldCodec.ForMessage(66, global::OperationsResearch.MPSolution.Parser);
    private readonly pbc::RepeatedField<global::OperationsResearch.MPSolution> additionalSolutions_ = new pbc::RepeatedField<global::OperationsResearch.MPSolution>();
    /// <summary>
    /// [Advanced usage.]
    /// If `MPModelRequest.populate_additional_solutions_up_to` > 0, up to that
    /// number of additional solutions may be populated here, if available. These
    /// additional solutions are different than the main solution described by the
    /// above fields `objective_value` and `variable_value`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OperationsResearch.MPSolution> AdditionalSolutions {
      get { return additionalSolutions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MPSolutionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MPSolutionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (StatusStr != other.StatusStr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectiveValue, other.ObjectiveValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BestObjectiveBound, other.BestObjectiveBound)) return false;
      if(!variableValue_.Equals(other.variableValue_)) return false;
      if (!object.Equals(SolveInfo, other.SolveInfo)) return false;
      if (SolverSpecificInfo != other.SolverSpecificInfo) return false;
      if(!dualValue_.Equals(other.dualValue_)) return false;
      if(!reducedCost_.Equals(other.reducedCost_)) return false;
      if(!additionalSolutions_.Equals(other.additionalSolutions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStatus) hash ^= Status.GetHashCode();
      if (HasStatusStr) hash ^= StatusStr.GetHashCode();
      if (HasObjectiveValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectiveValue);
      if (HasBestObjectiveBound) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BestObjectiveBound);
      hash ^= variableValue_.GetHashCode();
      if (solveInfo_ != null) hash ^= SolveInfo.GetHashCode();
      if (HasSolverSpecificInfo) hash ^= SolverSpecificInfo.GetHashCode();
      hash ^= dualValue_.GetHashCode();
      hash ^= reducedCost_.GetHashCode();
      hash ^= additionalSolutions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (HasObjectiveValue) {
        output.WriteRawTag(17);
        output.WriteDouble(ObjectiveValue);
      }
      variableValue_.WriteTo(output, _repeated_variableValue_codec);
      dualValue_.WriteTo(output, _repeated_dualValue_codec);
      if (HasBestObjectiveBound) {
        output.WriteRawTag(41);
        output.WriteDouble(BestObjectiveBound);
      }
      reducedCost_.WriteTo(output, _repeated_reducedCost_codec);
      if (HasStatusStr) {
        output.WriteRawTag(58);
        output.WriteString(StatusStr);
      }
      additionalSolutions_.WriteTo(output, _repeated_additionalSolutions_codec);
      if (solveInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SolveInfo);
      }
      if (HasSolverSpecificInfo) {
        output.WriteRawTag(90);
        output.WriteBytes(SolverSpecificInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (HasObjectiveValue) {
        output.WriteRawTag(17);
        output.WriteDouble(ObjectiveValue);
      }
      variableValue_.WriteTo(ref output, _repeated_variableValue_codec);
      dualValue_.WriteTo(ref output, _repeated_dualValue_codec);
      if (HasBestObjectiveBound) {
        output.WriteRawTag(41);
        output.WriteDouble(BestObjectiveBound);
      }
      reducedCost_.WriteTo(ref output, _repeated_reducedCost_codec);
      if (HasStatusStr) {
        output.WriteRawTag(58);
        output.WriteString(StatusStr);
      }
      additionalSolutions_.WriteTo(ref output, _repeated_additionalSolutions_codec);
      if (solveInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SolveInfo);
      }
      if (HasSolverSpecificInfo) {
        output.WriteRawTag(90);
        output.WriteBytes(SolverSpecificInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (HasStatusStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusStr);
      }
      if (HasObjectiveValue) {
        size += 1 + 8;
      }
      if (HasBestObjectiveBound) {
        size += 1 + 8;
      }
      size += variableValue_.CalculateSize(_repeated_variableValue_codec);
      if (solveInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolveInfo);
      }
      if (HasSolverSpecificInfo) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SolverSpecificInfo);
      }
      size += dualValue_.CalculateSize(_repeated_dualValue_codec);
      size += reducedCost_.CalculateSize(_repeated_reducedCost_codec);
      size += additionalSolutions_.CalculateSize(_repeated_additionalSolutions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MPSolutionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasStatusStr) {
        StatusStr = other.StatusStr;
      }
      if (other.HasObjectiveValue) {
        ObjectiveValue = other.ObjectiveValue;
      }
      if (other.HasBestObjectiveBound) {
        BestObjectiveBound = other.BestObjectiveBound;
      }
      variableValue_.Add(other.variableValue_);
      if (other.solveInfo_ != null) {
        if (solveInfo_ == null) {
          SolveInfo = new global::OperationsResearch.MPSolveInfo();
        }
        SolveInfo.MergeFrom(other.SolveInfo);
      }
      if (other.HasSolverSpecificInfo) {
        SolverSpecificInfo = other.SolverSpecificInfo;
      }
      dualValue_.Add(other.dualValue_);
      reducedCost_.Add(other.reducedCost_);
      additionalSolutions_.Add(other.additionalSolutions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::OperationsResearch.MPSolverResponseStatus) input.ReadEnum();
            break;
          }
          case 17: {
            ObjectiveValue = input.ReadDouble();
            break;
          }
          case 26:
          case 25: {
            variableValue_.AddEntriesFrom(input, _repeated_variableValue_codec);
            break;
          }
          case 34:
          case 33: {
            dualValue_.AddEntriesFrom(input, _repeated_dualValue_codec);
            break;
          }
          case 41: {
            BestObjectiveBound = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            reducedCost_.AddEntriesFrom(input, _repeated_reducedCost_codec);
            break;
          }
          case 58: {
            StatusStr = input.ReadString();
            break;
          }
          case 66: {
            additionalSolutions_.AddEntriesFrom(input, _repeated_additionalSolutions_codec);
            break;
          }
          case 82: {
            if (solveInfo_ == null) {
              SolveInfo = new global::OperationsResearch.MPSolveInfo();
            }
            input.ReadMessage(SolveInfo);
            break;
          }
          case 90: {
            SolverSpecificInfo = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::OperationsResearch.MPSolverResponseStatus) input.ReadEnum();
            break;
          }
          case 17: {
            ObjectiveValue = input.ReadDouble();
            break;
          }
          case 26:
          case 25: {
            variableValue_.AddEntriesFrom(ref input, _repeated_variableValue_codec);
            break;
          }
          case 34:
          case 33: {
            dualValue_.AddEntriesFrom(ref input, _repeated_dualValue_codec);
            break;
          }
          case 41: {
            BestObjectiveBound = input.ReadDouble();
            break;
          }
          case 50:
          case 49: {
            reducedCost_.AddEntriesFrom(ref input, _repeated_reducedCost_codec);
            break;
          }
          case 58: {
            StatusStr = input.ReadString();
            break;
          }
          case 66: {
            additionalSolutions_.AddEntriesFrom(ref input, _repeated_additionalSolutions_codec);
            break;
          }
          case 82: {
            if (solveInfo_ == null) {
              SolveInfo = new global::OperationsResearch.MPSolveInfo();
            }
            input.ReadMessage(SolveInfo);
            break;
          }
          case 90: {
            SolverSpecificInfo = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
