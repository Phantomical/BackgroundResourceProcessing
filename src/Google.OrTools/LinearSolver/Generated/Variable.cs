//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Google.OrTools.LinearSolver {

public partial class Variable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Variable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Variable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Variable obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Variable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          operations_research_linear_solverPINVOKE.delete_Variable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string Name() {
    string ret = operations_research_linear_solverPINVOKE.Variable_Name(swigCPtr);
    return ret;
  }

  public void SetInteger(bool integer) {
    operations_research_linear_solverPINVOKE.Variable_SetInteger(swigCPtr, integer);
  }

  public double SolutionValue() {
    double ret = operations_research_linear_solverPINVOKE.Variable_SolutionValue(swigCPtr);
    return ret;
  }

  public double Lb() {
    double ret = operations_research_linear_solverPINVOKE.Variable_Lb(swigCPtr);
    return ret;
  }

  public double Ub() {
    double ret = operations_research_linear_solverPINVOKE.Variable_Ub(swigCPtr);
    return ret;
  }

  public void SetLb(double lb) {
    operations_research_linear_solverPINVOKE.Variable_SetLb(swigCPtr, lb);
  }

  public void SetUb(double ub) {
    operations_research_linear_solverPINVOKE.Variable_SetUb(swigCPtr, ub);
  }

  public void SetBounds(double lb, double ub) {
    operations_research_linear_solverPINVOKE.Variable_SetBounds(swigCPtr, lb, ub);
  }

  public double ReducedCost() {
    double ret = operations_research_linear_solverPINVOKE.Variable_ReducedCost(swigCPtr);
    return ret;
  }

  public Solver.BasisStatus BasisStatus() {
    Solver.BasisStatus ret = (Solver.BasisStatus)operations_research_linear_solverPINVOKE.Variable_BasisStatus(swigCPtr);
    return ret;
  }

}

}
