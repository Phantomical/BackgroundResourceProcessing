//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Google.OrTools.LinearSolver {

public partial class MPSolverParameters : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MPSolverParameters(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MPSolverParameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MPSolverParameters obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MPSolverParameters() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          operations_research_linear_solverPINVOKE.delete_MPSolverParameters(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static double kDefaultRelativeMipGap {
    get {
      double ret = operations_research_linear_solverPINVOKE.MPSolverParameters_kDefaultRelativeMipGap_get();
      return ret;
    } 
  }

  public static double kDefaultPrimalTolerance {
    get {
      double ret = operations_research_linear_solverPINVOKE.MPSolverParameters_kDefaultPrimalTolerance_get();
      return ret;
    } 
  }

  public static double kDefaultDualTolerance {
    get {
      double ret = operations_research_linear_solverPINVOKE.MPSolverParameters_kDefaultDualTolerance_get();
      return ret;
    } 
  }

  public static MPSolverParameters.PresolveValues kDefaultPresolve {
    get {
      MPSolverParameters.PresolveValues ret = (MPSolverParameters.PresolveValues)operations_research_linear_solverPINVOKE.MPSolverParameters_kDefaultPresolve_get();
      return ret;
    } 
  }

  public static MPSolverParameters.IncrementalityValues kDefaultIncrementality {
    get {
      MPSolverParameters.IncrementalityValues ret = (MPSolverParameters.IncrementalityValues)operations_research_linear_solverPINVOKE.MPSolverParameters_kDefaultIncrementality_get();
      return ret;
    } 
  }

  public MPSolverParameters() : this(operations_research_linear_solverPINVOKE.new_MPSolverParameters(), true) {
  }

  public void SetDoubleParam(MPSolverParameters.DoubleParam param, double value) {
    operations_research_linear_solverPINVOKE.MPSolverParameters_SetDoubleParam(swigCPtr, (int)param, value);
  }

  public void SetIntegerParam(MPSolverParameters.IntegerParam param, int value) {
    operations_research_linear_solverPINVOKE.MPSolverParameters_SetIntegerParam(swigCPtr, (int)param, value);
  }

  public double GetDoubleParam(MPSolverParameters.DoubleParam param) {
    double ret = operations_research_linear_solverPINVOKE.MPSolverParameters_GetDoubleParam(swigCPtr, (int)param);
    return ret;
  }

  public int GetIntegerParam(MPSolverParameters.IntegerParam param) {
    int ret = operations_research_linear_solverPINVOKE.MPSolverParameters_GetIntegerParam(swigCPtr, (int)param);
    return ret;
  }

  public enum DoubleParam {
    RELATIVE_MIP_GAP = 0,
    PRIMAL_TOLERANCE = 1,
    DUAL_TOLERANCE = 2
  }

  public enum IntegerParam {
    PRESOLVE = 1000,
    LP_ALGORITHM = 1001,
    INCREMENTALITY = 1002,
    SCALING = 1003
  }

  public enum PresolveValues {
    PRESOLVE_OFF = 0,
    PRESOLVE_ON = 1
  }

  public enum LpAlgorithmValues {
    DUAL = 10,
    PRIMAL = 11,
    BARRIER = 12
  }

  public enum IncrementalityValues {
    INCREMENTALITY_OFF = 0,
    INCREMENTALITY_ON = 1
  }

  public enum ScalingValues {
    SCALING_OFF = 0,
    SCALING_ON = 1
  }

}

}
