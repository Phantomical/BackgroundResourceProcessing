/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_operations_research_linear_solver(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_operations_research_linear_solver(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_operations_research_linear_solver(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <cstdint>
#include <string>
#include <vector>


#include <stdint.h>		// Use the C99 official header


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if !defined(SWIG_NO_WORDSIZE64_CHECK)
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG generated code is invalid on this 32-bit architecture, please regenerate without defining SWIGWORDSIZE64 or define SWIGWORDSIZE32"
#endif
#endif


#include <string>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include "ortools/linear_solver/linear_solver.h"
#include "ortools/linear_solver/linear_solver.pb.h"
#include "ortools/linear_solver/model_exporter.h"

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< operations_research::MPConstraint * > *new_std_vector_Sl_operations_research_MPConstraint_Sm__Sg___SWIG_2(int capacity){
        std::vector< operations_research::MPConstraint* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< operations_research::MPConstraint* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN operations_research::MPConstraint *std_vector_Sl_operations_research_MPConstraint_Sm__Sg__getitemcopy(std::vector< operations_research::MPConstraint * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< operations_research::MPConstraint * >::value_type const &std_vector_Sl_operations_research_MPConstraint_Sm__Sg__getitem(std::vector< operations_research::MPConstraint * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__setitem(std::vector< operations_research::MPConstraint * > *self,int index,operations_research::MPConstraint *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__AddRange(std::vector< operations_research::MPConstraint * > *self,std::vector< operations_research::MPConstraint * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< operations_research::MPConstraint * > *std_vector_Sl_operations_research_MPConstraint_Sm__Sg__GetRange(std::vector< operations_research::MPConstraint * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< operations_research::MPConstraint* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Insert(std::vector< operations_research::MPConstraint * > *self,int index,operations_research::MPConstraint *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__InsertRange(std::vector< operations_research::MPConstraint * > *self,int index,std::vector< operations_research::MPConstraint * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__RemoveAt(std::vector< operations_research::MPConstraint * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__RemoveRange(std::vector< operations_research::MPConstraint * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< operations_research::MPConstraint * > *std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Repeat(operations_research::MPConstraint *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< operations_research::MPConstraint* >(count, value);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Reverse__SWIG_0(std::vector< operations_research::MPConstraint * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Reverse__SWIG_1(std::vector< operations_research::MPConstraint * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPConstraint_Sm__Sg__SetRange(std::vector< operations_research::MPConstraint * > *self,int index,std::vector< operations_research::MPConstraint * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Contains(std::vector< operations_research::MPConstraint * > *self,operations_research::MPConstraint *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_operations_research_MPConstraint_Sm__Sg__IndexOf(std::vector< operations_research::MPConstraint * > *self,operations_research::MPConstraint *const &value){
        int index = -1;
        std::vector< operations_research::MPConstraint* >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_operations_research_MPConstraint_Sm__Sg__LastIndexOf(std::vector< operations_research::MPConstraint * > *self,operations_research::MPConstraint *const &value){
        int index = -1;
        std::vector< operations_research::MPConstraint* >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Remove(std::vector< operations_research::MPConstraint * > *self,operations_research::MPConstraint *const &value){
        std::vector< operations_research::MPConstraint* >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< operations_research::MPVariable * > *new_std_vector_Sl_operations_research_MPVariable_Sm__Sg___SWIG_2(int capacity){
        std::vector< operations_research::MPVariable* >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< operations_research::MPVariable* >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN operations_research::MPVariable *std_vector_Sl_operations_research_MPVariable_Sm__Sg__getitemcopy(std::vector< operations_research::MPVariable * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< operations_research::MPVariable * >::value_type const &std_vector_Sl_operations_research_MPVariable_Sm__Sg__getitem(std::vector< operations_research::MPVariable * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__setitem(std::vector< operations_research::MPVariable * > *self,int index,operations_research::MPVariable *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__AddRange(std::vector< operations_research::MPVariable * > *self,std::vector< operations_research::MPVariable * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< operations_research::MPVariable * > *std_vector_Sl_operations_research_MPVariable_Sm__Sg__GetRange(std::vector< operations_research::MPVariable * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< operations_research::MPVariable* >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__Insert(std::vector< operations_research::MPVariable * > *self,int index,operations_research::MPVariable *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__InsertRange(std::vector< operations_research::MPVariable * > *self,int index,std::vector< operations_research::MPVariable * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__RemoveAt(std::vector< operations_research::MPVariable * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__RemoveRange(std::vector< operations_research::MPVariable * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< operations_research::MPVariable * > *std_vector_Sl_operations_research_MPVariable_Sm__Sg__Repeat(operations_research::MPVariable *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< operations_research::MPVariable* >(count, value);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__Reverse__SWIG_0(std::vector< operations_research::MPVariable * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__Reverse__SWIG_1(std::vector< operations_research::MPVariable * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_operations_research_MPVariable_Sm__Sg__SetRange(std::vector< operations_research::MPVariable * > *self,int index,std::vector< operations_research::MPVariable * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_operations_research_MPVariable_Sm__Sg__Contains(std::vector< operations_research::MPVariable * > *self,operations_research::MPVariable *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_operations_research_MPVariable_Sm__Sg__IndexOf(std::vector< operations_research::MPVariable * > *self,operations_research::MPVariable *const &value){
        int index = -1;
        std::vector< operations_research::MPVariable* >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_operations_research_MPVariable_Sm__Sg__LastIndexOf(std::vector< operations_research::MPVariable * > *self,operations_research::MPVariable *const &value){
        int index = -1;
        std::vector< operations_research::MPVariable* >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_operations_research_MPVariable_Sm__Sg__Remove(std::vector< operations_research::MPVariable * > *self,operations_research::MPVariable *const &value){
        std::vector< operations_research::MPVariable* >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::string operations_research_MPSolver_ExportModelAsLpFormat(operations_research::MPSolver *self,bool obfuscated){
    operations_research::MPModelExportOptions options;
    options.obfuscate = obfuscated;
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return ExportModelAsLpFormat(model, options).value_or("");
  }
SWIGINTERN std::string operations_research_MPSolver_ExportModelAsMpsFormat(operations_research::MPSolver *self,bool fixed_format,bool obfuscated){
    operations_research::MPModelExportOptions options;
    options.obfuscate = obfuscated;
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return ExportModelAsMpsFormat(model, options).value_or("");
  }
SWIGINTERN bool operations_research_MPSolver_WriteModelToMpsFile(operations_research::MPSolver *self,std::string const &filename,bool fixed_format,bool obfuscated){
    operations_research::MPModelExportOptions options;
    options.obfuscate = obfuscated;
    operations_research::MPModelProto model;
    self->ExportModelToProto(&model);
    return WriteModelToMpsFile(filename, model, options).ok();
  }
SWIGINTERN void operations_research_MPSolver_SetHint(operations_research::MPSolver *self,std::vector< operations_research::MPVariable * > const &variables,std::vector< double > const &values){
    if (variables.size() != values.size()) {
      LOG(FATAL) << "Different number of variables and values when setting "
                 << "hint.";
    }
    std::vector<std::pair<const operations_research::MPVariable*, double> >
        hint(variables.size());
    for (int i = 0; i < variables.size(); ++i) {
      hint[i] = std::make_pair(variables[i], values[i]);
    }
    self->SetHint(hint);
  }
SWIGINTERN bool operations_research_MPSolver_SetNumThreads(operations_research::MPSolver *self,int num_theads){
    return self->SetNumThreads(num_theads).ok();
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_DoubleVector__SWIG_0___() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_DoubleVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Clear___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Add___(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_DoubleVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_getitemcopy___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_getitem___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_setitem___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Insert___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Repeat___(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Contains___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_IndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_LastIndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_DoubleVector_Remove___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_DoubleVector___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPConstraintVector__SWIG_0___() {
  void * jresult ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  result = (std::vector< operations_research::MPConstraint * > *)new std::vector< operations_research::MPConstraint * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPConstraintVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = 0 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPConstraint * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< operations_research::MPConstraint * > *)new std::vector< operations_research::MPConstraint * >((std::vector< operations_research::MPConstraint * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Clear___(void * jarg1) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Add___(void * jarg1, void * jarg2) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  operations_research::MPConstraint **arg2 = 0 ;
  operations_research::MPConstraint *temp2 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  temp2 = (operations_research::MPConstraint *)jarg2;
  arg2 = (operations_research::MPConstraint **)&temp2; 
  (arg1)->push_back((operations_research::MPConstraint *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  std::vector< operations_research::MPConstraint * >::size_type result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  result = ((std::vector< operations_research::MPConstraint * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  result = (bool)((std::vector< operations_research::MPConstraint * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  std::vector< operations_research::MPConstraint * >::size_type result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  result = ((std::vector< operations_research::MPConstraint * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  std::vector< operations_research::MPConstraint * >::size_type arg2 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (std::vector< operations_research::MPConstraint * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPConstraintVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< operations_research::MPConstraint * > *)new_std_vector_Sl_operations_research_MPConstraint_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (operations_research::MPConstraint *)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPConstraint * >::value_type *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< operations_research::MPConstraint * >::value_type *) &std_vector_Sl_operations_research_MPConstraint_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  operations_research::MPConstraint **arg3 = 0 ;
  operations_research::MPConstraint *temp3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (operations_research::MPConstraint *)jarg3;
  arg3 = (operations_research::MPConstraint **)&temp3; 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__setitem(arg1,arg2,(operations_research::MPConstraint *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  std::vector< operations_research::MPConstraint * > *arg2 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (std::vector< operations_research::MPConstraint * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPConstraint * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_operations_research_MPConstraint_Sm__Sg__AddRange(arg1,(std::vector< operations_research::MPConstraint * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< operations_research::MPConstraint * > *)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  operations_research::MPConstraint **arg3 = 0 ;
  operations_research::MPConstraint *temp3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (operations_research::MPConstraint *)jarg3;
  arg3 = (operations_research::MPConstraint **)&temp3; 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Insert(arg1,arg2,(operations_research::MPConstraint *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPConstraint * > *arg3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< operations_research::MPConstraint * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPConstraint * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__InsertRange(arg1,arg2,(std::vector< operations_research::MPConstraint * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  operations_research::MPConstraint **arg1 = 0 ;
  int arg2 ;
  operations_research::MPConstraint *temp1 = 0 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  temp1 = (operations_research::MPConstraint *)jarg1;
  arg1 = (operations_research::MPConstraint **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< operations_research::MPConstraint * > *)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Repeat((operations_research::MPConstraint *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPConstraint * > *arg3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< operations_research::MPConstraint * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPConstraint * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_operations_research_MPConstraint_Sm__Sg__SetRange(arg1,arg2,(std::vector< operations_research::MPConstraint * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  operations_research::MPConstraint **arg2 = 0 ;
  operations_research::MPConstraint *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  temp2 = (operations_research::MPConstraint *)jarg2;
  arg2 = (operations_research::MPConstraint **)&temp2; 
  result = (bool)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Contains(arg1,(operations_research::MPConstraint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  operations_research::MPConstraint **arg2 = 0 ;
  operations_research::MPConstraint *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  temp2 = (operations_research::MPConstraint *)jarg2;
  arg2 = (operations_research::MPConstraint **)&temp2; 
  result = (int)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__IndexOf(arg1,(operations_research::MPConstraint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  operations_research::MPConstraint **arg2 = 0 ;
  operations_research::MPConstraint *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  temp2 = (operations_research::MPConstraint *)jarg2;
  arg2 = (operations_research::MPConstraint **)&temp2; 
  result = (int)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__LastIndexOf(arg1,(operations_research::MPConstraint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPConstraintVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  operations_research::MPConstraint **arg2 = 0 ;
  operations_research::MPConstraint *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  temp2 = (operations_research::MPConstraint *)jarg2;
  arg2 = (operations_research::MPConstraint **)&temp2; 
  result = (bool)std_vector_Sl_operations_research_MPConstraint_Sm__Sg__Remove(arg1,(operations_research::MPConstraint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_MPConstraintVector___(void * jarg1) {
  std::vector< operations_research::MPConstraint * > *arg1 = (std::vector< operations_research::MPConstraint * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPConstraint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPVariableVector__SWIG_0___() {
  void * jresult ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  result = (std::vector< operations_research::MPVariable * > *)new std::vector< operations_research::MPVariable * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPVariableVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = 0 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPVariable * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< operations_research::MPVariable * > *)new std::vector< operations_research::MPVariable * >((std::vector< operations_research::MPVariable * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Clear___(void * jarg1) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Add___(void * jarg1, void * jarg2) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  operations_research::MPVariable **arg2 = 0 ;
  operations_research::MPVariable *temp2 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  temp2 = (operations_research::MPVariable *)jarg2;
  arg2 = (operations_research::MPVariable **)&temp2; 
  (arg1)->push_back((operations_research::MPVariable *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  std::vector< operations_research::MPVariable * >::size_type result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  result = ((std::vector< operations_research::MPVariable * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  result = (bool)((std::vector< operations_research::MPVariable * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  std::vector< operations_research::MPVariable * >::size_type result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  result = ((std::vector< operations_research::MPVariable * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  std::vector< operations_research::MPVariable * >::size_type arg2 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (std::vector< operations_research::MPVariable * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPVariableVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< operations_research::MPVariable * > *)new_std_vector_Sl_operations_research_MPVariable_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (operations_research::MPVariable *)std_vector_Sl_operations_research_MPVariable_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPVariable * >::value_type *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< operations_research::MPVariable * >::value_type *) &std_vector_Sl_operations_research_MPVariable_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  operations_research::MPVariable **arg3 = 0 ;
  operations_research::MPVariable *temp3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (operations_research::MPVariable *)jarg3;
  arg3 = (operations_research::MPVariable **)&temp3; 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__setitem(arg1,arg2,(operations_research::MPVariable *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  std::vector< operations_research::MPVariable * > *arg2 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (std::vector< operations_research::MPVariable * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPVariable * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_operations_research_MPVariable_Sm__Sg__AddRange(arg1,(std::vector< operations_research::MPVariable * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< operations_research::MPVariable * > *)std_vector_Sl_operations_research_MPVariable_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  operations_research::MPVariable **arg3 = 0 ;
  operations_research::MPVariable *temp3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (operations_research::MPVariable *)jarg3;
  arg3 = (operations_research::MPVariable **)&temp3; 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__Insert(arg1,arg2,(operations_research::MPVariable *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPVariable * > *arg3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< operations_research::MPVariable * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPVariable * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__InsertRange(arg1,arg2,(std::vector< operations_research::MPVariable * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  operations_research::MPVariable **arg1 = 0 ;
  int arg2 ;
  operations_research::MPVariable *temp1 = 0 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  temp1 = (operations_research::MPVariable *)jarg1;
  arg1 = (operations_research::MPVariable **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< operations_research::MPVariable * > *)std_vector_Sl_operations_research_MPVariable_Sm__Sg__Repeat((operations_research::MPVariable *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  std_vector_Sl_operations_research_MPVariable_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  int arg2 ;
  std::vector< operations_research::MPVariable * > *arg3 = 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< operations_research::MPVariable * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPVariable * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_operations_research_MPVariable_Sm__Sg__SetRange(arg1,arg2,(std::vector< operations_research::MPVariable * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  operations_research::MPVariable **arg2 = 0 ;
  operations_research::MPVariable *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  temp2 = (operations_research::MPVariable *)jarg2;
  arg2 = (operations_research::MPVariable **)&temp2; 
  result = (bool)std_vector_Sl_operations_research_MPVariable_Sm__Sg__Contains(arg1,(operations_research::MPVariable *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  operations_research::MPVariable **arg2 = 0 ;
  operations_research::MPVariable *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  temp2 = (operations_research::MPVariable *)jarg2;
  arg2 = (operations_research::MPVariable **)&temp2; 
  result = (int)std_vector_Sl_operations_research_MPVariable_Sm__Sg__IndexOf(arg1,(operations_research::MPVariable *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  operations_research::MPVariable **arg2 = 0 ;
  operations_research::MPVariable *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  temp2 = (operations_research::MPVariable *)jarg2;
  arg2 = (operations_research::MPVariable **)&temp2; 
  result = (int)std_vector_Sl_operations_research_MPVariable_Sm__Sg__LastIndexOf(arg1,(operations_research::MPVariable *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPVariableVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  operations_research::MPVariable **arg2 = 0 ;
  operations_research::MPVariable *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  temp2 = (operations_research::MPVariable *)jarg2;
  arg2 = (operations_research::MPVariable **)&temp2; 
  result = (bool)std_vector_Sl_operations_research_MPVariable_Sm__Sg__Remove(arg1,(operations_research::MPVariable *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_MPVariableVector___(void * jarg1) {
  std::vector< operations_research::MPVariable * > *arg1 = (std::vector< operations_research::MPVariable * > *) 0 ;
  
  arg1 = (std::vector< operations_research::MPVariable * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_Solver___(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  operations_research::MPSolver::OptimizationProblemType arg2 ;
  operations_research::MPSolver *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (operations_research::MPSolver::OptimizationProblemType)jarg2; 
  result = (operations_research::MPSolver *)new operations_research::MPSolver((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_Solver___(void * jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_CreateSolver___(const char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  operations_research::MPSolver *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (operations_research::MPSolver *)operations_research::MPSolver::CreateSolver((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SupportsProblemType___(int jarg1) {
  unsigned int jresult ;
  operations_research::MPSolver::OptimizationProblemType arg1 ;
  bool result;
  
  arg1 = (operations_research::MPSolver::OptimizationProblemType)jarg1; 
  result = (bool)operations_research::MPSolver::SupportsProblemType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_IsMip___(void * jarg1) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (bool)((operations_research::MPSolver const *)arg1)->IsMIP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Clear___(void * jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_NumVariables___(void * jarg1) {
  int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (int)((operations_research::MPSolver const *)arg1)->NumVariables();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_variables___(void * jarg1) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPVariable * > *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (std::vector< operations_research::MPVariable * > *) &((operations_research::MPSolver const *)arg1)->variables();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Variable___(void * jarg1, int jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int arg2 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::MPVariable *)((operations_research::MPSolver const *)arg1)->variable(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_LookupVariableOrNull___(void * jarg1, const char * jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (operations_research::MPVariable *)((operations_research::MPSolver const *)arg1)->LookupVariableOrNull((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeVar___(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, const char * jarg5) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (operations_research::MPVariable *)(arg1)->MakeVar(arg2,arg3,arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeNumVar___(void * jarg1, double jarg2, double jarg3, const char * jarg4) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (operations_research::MPVariable *)(arg1)->MakeNumVar(arg2,arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeIntVar___(void * jarg1, double jarg2, double jarg3, const char * jarg4) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (operations_research::MPVariable *)(arg1)->MakeIntVar(arg2,arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeBoolVar___(void * jarg1, const char * jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPVariable *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (operations_research::MPVariable *)(arg1)->MakeBoolVar((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_NumConstraints___(void * jarg1) {
  int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (int)((operations_research::MPSolver const *)arg1)->NumConstraints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_constraints___(void * jarg1) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPConstraint * > *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (std::vector< operations_research::MPConstraint * > *) &((operations_research::MPSolver const *)arg1)->constraints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Constraint___(void * jarg1, int jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int arg2 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (int)jarg2; 
  result = (operations_research::MPConstraint *)((operations_research::MPSolver const *)arg1)->constraint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_LookupConstraintOrNull___(void * jarg1, const char * jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (operations_research::MPConstraint *)((operations_research::MPSolver const *)arg1)->LookupConstraintOrNull((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeConstraint__SWIG_0___(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeConstraint__SWIG_1___(void * jarg1) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeConstraint__SWIG_2___(void * jarg1, double jarg2, double jarg3, const char * jarg4) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint(arg2,arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_MakeConstraint__SWIG_3___(void * jarg1, const char * jarg2) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  operations_research::MPConstraint *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (operations_research::MPConstraint *)(arg1)->MakeRowConstraint((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Objective___(void * jarg1) {
  void * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPObjective *result = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (operations_research::MPObjective *)(arg1)->MutableObjective();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Solve__SWIG_0___(void * jarg1) {
  int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolver::ResultStatus result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Solve__SWIG_1___(void * jarg1, void * jarg2) {
  int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  operations_research::MPSolverParameters *arg2 = 0 ;
  operations_research::MPSolver::ResultStatus result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (operations_research::MPSolverParameters *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "operations_research::MPSolverParameters const & is null", 0);
    return 0;
  } 
  result = (operations_research::MPSolver::ResultStatus)(arg1)->Solve((operations_research::MPSolverParameters const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_ComputeConstraintActivities___(void * jarg1) {
  void* jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< double > result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = ((operations_research::MPSolver const *)arg1)->ComputeConstraintActivities();
  
  jresult = new std::vector< double >((const std::vector< double> &)result);
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_VerifySolution___(void * jarg1, double jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((operations_research::MPSolver const *)arg1)->VerifySolution(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Reset___(void * jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_InterruptSolve___(void * jarg1) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (bool)(arg1)->InterruptSolve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SetSolverSpecificParametersAsString___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->SetSolverSpecificParametersAsString((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_EnableOutput___(void * jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  (arg1)->EnableOutput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SuppressOutput___(void * jarg1) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  (arg1)->SuppressOutput();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Iterations___(void * jarg1) {
  long long jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64_t result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (int64_t)((operations_research::MPSolver const *)arg1)->iterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_Nodes___(void * jarg1) {
  long long jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64_t result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (int64_t)((operations_research::MPSolver const *)arg1)->nodes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SolverVersion___(void * jarg1) {
  const char * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = ((operations_research::MPSolver const *)arg1)->SolverVersion();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_ComputeExactConditionNumber___(void * jarg1) {
  double jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  double result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (double)((operations_research::MPSolver const *)arg1)->ComputeExactConditionNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SetTimeLimit___(void * jarg1, long long jarg2) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64_t arg2 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->set_time_limit(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_WallTime___(void * jarg1) {
  long long jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int64_t result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  result = (int64_t)((operations_research::MPSolver const *)arg1)->wall_time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_ExportModelAsLpFormat___(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool arg2 ;
  std::string result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = operations_research_MPSolver_ExportModelAsLpFormat(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_ExportModelAsMpsFormat___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  const char * jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  std::string result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = operations_research_MPSolver_ExportModelAsMpsFormat(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_WriteModelToMpsFile___(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)operations_research_MPSolver_WriteModelToMpsFile(arg1,(std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SetHint___(void * jarg1, void * jarg2,  int length3, double*  jarg3) {
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  std::vector< operations_research::MPVariable * > *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (std::vector< operations_research::MPVariable * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< operations_research::MPVariable * > const & is null", 0);
    return ;
  } 
  
  arg3 = new std::vector<double>;
  arg3->reserve(length3);
  for(int i = 0; i < length3; ++i) {
    arg3->emplace_back(jarg3[i]);
  }
  
  operations_research_MPSolver_SetHint(arg1,(std::vector< operations_research::MPVariable * > const &)*arg2,(std::vector< double > const &)*arg3);
  {
    delete arg3; 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Solver_SetNumThreads___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  operations_research::MPSolver *arg1 = (operations_research::MPSolver *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (operations_research::MPSolver *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)operations_research_MPSolver_SetNumThreads(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_Clear___(void * jarg1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_SetCoefficient___(void * jarg1, void * jarg2, double jarg3) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) 0 ;
  double arg3 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  arg2 = (operations_research::MPVariable *)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_GetCoefficient___(void * jarg1, void * jarg2) {
  double jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  arg2 = (operations_research::MPVariable *)jarg2; 
  result = (double)((operations_research::MPObjective const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_SetOffset___(void * jarg1, double jarg2) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double arg2 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetOffset(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_Offset___(void * jarg1) {
  double jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->offset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_SetOptimizationDirection___(void * jarg1, unsigned int jarg2) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool arg2 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOptimizationDirection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_SetMinimization___(void * jarg1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  (arg1)->SetMinimization();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_SetMaximization___(void * jarg1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  (arg1)->SetMaximization();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_Maximization___(void * jarg1) {
  unsigned int jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  result = (bool)((operations_research::MPObjective const *)arg1)->maximization();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_Minimization___(void * jarg1) {
  unsigned int jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  bool result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  result = (bool)((operations_research::MPObjective const *)arg1)->minimization();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_Value___(void * jarg1) {
  double jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->Value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Objective_BestBound___(void * jarg1) {
  double jresult ;
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  double result;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  result = (double)((operations_research::MPObjective const *)arg1)->BestBound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_Objective___(void * jarg1) {
  operations_research::MPObjective *arg1 = (operations_research::MPObjective *) 0 ;
  
  arg1 = (operations_research::MPObjective *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_Name___(void * jarg1) {
  const char * jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (std::string *) &((operations_research::MPVariable const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_SetInteger___(void * jarg1, unsigned int jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  bool arg2 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInteger(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_SolutionValue___(void * jarg1) {
  double jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->solution_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_Lb___(void * jarg1) {
  double jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->lb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_Ub___(void * jarg1) {
  double jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->ub();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_SetLb___(void * jarg1, double jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetLB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_SetUb___(void * jarg1, double jarg2) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetUB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_SetBounds___(void * jarg1, double jarg2, double jarg3) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetBounds(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_ReducedCost___(void * jarg1) {
  double jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (double)((operations_research::MPVariable const *)arg1)->reduced_cost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Variable_BasisStatus___(void * jarg1) {
  int jresult ;
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPVariable const *)arg1)->basis_status();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_Variable___(void * jarg1) {
  operations_research::MPVariable *arg1 = (operations_research::MPVariable *) 0 ;
  
  arg1 = (operations_research::MPVariable *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_Name___(void * jarg1) {
  const char * jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (std::string *) &((operations_research::MPConstraint const *)arg1)->name();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_SetCoefficient___(void * jarg1, void * jarg2, double jarg3) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) 0 ;
  double arg3 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = (operations_research::MPVariable *)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetCoefficient((operations_research::MPVariable const *)arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_GetCoefficient___(void * jarg1, void * jarg2) {
  double jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPVariable *arg2 = (operations_research::MPVariable *) 0 ;
  double result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = (operations_research::MPVariable *)jarg2; 
  result = (double)((operations_research::MPConstraint const *)arg1)->GetCoefficient((operations_research::MPVariable const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_Lb___(void * jarg1) {
  double jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->lb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_Ub___(void * jarg1) {
  double jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->ub();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_SetLb___(void * jarg1, double jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetLB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_SetUb___(void * jarg1, double jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetUB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_SetBounds___(void * jarg1, double jarg2, double jarg3) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetBounds(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_IsLazy___(void * jarg1) {
  unsigned int jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  bool result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (bool)((operations_research::MPConstraint const *)arg1)->is_lazy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_SetIsLazy___(void * jarg1, unsigned int jarg2) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_is_lazy(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_Index___(void * jarg1) {
  int jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  int result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (int)((operations_research::MPConstraint const *)arg1)->index();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_DualValue___(void * jarg1) {
  double jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  double result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (double)((operations_research::MPConstraint const *)arg1)->dual_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_Constraint_BasisStatus___(void * jarg1) {
  int jresult ;
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  operations_research::MPSolver::BasisStatus result;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  result = (operations_research::MPSolver::BasisStatus)((operations_research::MPConstraint const *)arg1)->basis_status();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_Constraint___(void * jarg1) {
  operations_research::MPConstraint *arg1 = (operations_research::MPConstraint *) 0 ;
  
  arg1 = (operations_research::MPConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_kDefaultRelativeMipGap_get___() {
  double jresult ;
  double result;
  
  result = (double)(double)operations_research::MPSolverParameters::kDefaultRelativeMipGap;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_kDefaultPrimalTolerance_get___() {
  double jresult ;
  double result;
  
  result = (double)(double)operations_research::MPSolverParameters::kDefaultPrimalTolerance;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_kDefaultDualTolerance_get___() {
  double jresult ;
  double result;
  
  result = (double)(double)operations_research::MPSolverParameters::kDefaultDualTolerance;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_kDefaultPresolve_get___() {
  int jresult ;
  operations_research::MPSolverParameters::PresolveValues result;
  
  result = (operations_research::MPSolverParameters::PresolveValues)(operations_research::MPSolverParameters::PresolveValues)operations_research::MPSolverParameters::kDefaultPresolve;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_kDefaultIncrementality_get___() {
  int jresult ;
  operations_research::MPSolverParameters::IncrementalityValues result;
  
  result = (operations_research::MPSolverParameters::IncrementalityValues)(operations_research::MPSolverParameters::IncrementalityValues)operations_research::MPSolverParameters::kDefaultIncrementality;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_new_MPSolverParameters___() {
  void * jresult ;
  operations_research::MPSolverParameters *result = 0 ;
  
  result = (operations_research::MPSolverParameters *)new operations_research::MPSolverParameters();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_SetDoubleParam___(void * jarg1, int jarg2, double jarg3) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double arg3 ;
  
  arg1 = (operations_research::MPSolverParameters *)jarg1; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetDoubleParam(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_SetIntegerParam___(void * jarg1, int jarg2, int jarg3) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int arg3 ;
  
  arg1 = (operations_research::MPSolverParameters *)jarg1; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetIntegerParam(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_GetDoubleParam___(void * jarg1, int jarg2) {
  double jresult ;
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::DoubleParam arg2 ;
  double result;
  
  arg1 = (operations_research::MPSolverParameters *)jarg1; 
  arg2 = (operations_research::MPSolverParameters::DoubleParam)jarg2; 
  result = (double)((operations_research::MPSolverParameters const *)arg1)->GetDoubleParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_MPSolverParameters_GetIntegerParam___(void * jarg1, int jarg2) {
  int jresult ;
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  operations_research::MPSolverParameters::IntegerParam arg2 ;
  int result;
  
  arg1 = (operations_research::MPSolverParameters *)jarg1; 
  arg2 = (operations_research::MPSolverParameters::IntegerParam)jarg2; 
  result = (int)((operations_research::MPSolverParameters const *)arg1)->GetIntegerParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GooglefOrToolsfLinearSolver_delete_MPSolverParameters___(void * jarg1) {
  operations_research::MPSolverParameters *arg1 = (operations_research::MPSolverParameters *) 0 ;
  
  arg1 = (operations_research::MPSolverParameters *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

